<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Data Trading</title>
	<atom:link href="https://datatrading.info/feed/" rel="self" type="application/rss+xml" />
	<link>https://datatrading.info/</link>
	<description>Tecnologie Digitali applicate al Trading</description>
	<lastBuildDate>Sat, 22 Oct 2022 07:07:45 +0000</lastBuildDate>
	<language>it-IT</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	

<image>
	<url>https://datatrading.info/wp-content/uploads/2019/04/favico.-300x300.jpg</url>
	<title>Data Trading</title>
	<link>https://datatrading.info/</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>TradingView: Aggiunger una sorgente dati di Quandl</title>
		<link>https://datatrading.info/tradingview-aggiunger-una-sorgente-dati-di-quandl/</link>
		
		<dc:creator><![CDATA[Gianluca]]></dc:creator>
		<pubDate>Mon, 04 Mar 2019 09:03:00 +0000</pubDate>
				<category><![CDATA[ToolBox Tradingview]]></category>
		<category><![CDATA[Toolbox Tradingview]]></category>
		<guid isPermaLink="false">https://datatrading.info/?p=3274</guid>

					<description><![CDATA[<p>Durante la navigazione nel pannello di ricerca degli asset disponibili su Tradingview potrebbe essere capito di trovare la scheda di Quandl e chiedersi se alcune delle fonti di dati esotiche disponibili su Quandl potrebbero essere di qualche utilità. Quandl ha una vasta selezione di set di dati (alcuni molto distanti dal trading e dall&#8217;economia) che &#8230;</p>
<p class="read-more"> <a class="" href="https://datatrading.info/tradingview-aggiunger-una-sorgente-dati-di-quandl/"> <span class="screen-reader-text">TradingView: Aggiunger una sorgente dati di Quandl</span> Leggi tutto »</a></p>
<p>L'articolo <a rel="nofollow" href="https://datatrading.info/tradingview-aggiunger-una-sorgente-dati-di-quandl/">TradingView: Aggiunger una sorgente dati di Quandl</a> proviene da <a rel="nofollow" href="https://datatrading.info">Data Trading</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="3274" class="elementor elementor-3274">
						<div class="elementor-inner">
				<div class="elementor-section-wrap">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-9c4df67 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="9c4df67" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
							<div class="elementor-row">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-a16f32d" data-id="a16f32d" data-element_type="column">
			<div class="elementor-column-wrap elementor-element-populated">
							<div class="elementor-widget-wrap">
						<div class="elementor-element elementor-element-8417e2e elementor-widget elementor-widget-text-editor" data-id="8417e2e" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p><span>Durante la navigazione nel pannello di ricerca degli asset disponibili su Tradingview potrebbe essere capito di trovare la scheda di Quandl e chiedersi se alcune delle fonti di dati esotiche disponibili su Quandl potrebbero essere di qualche utilità. </span><span>Quandl ha una vasta selezione di set di dati (alcuni molto distanti dal trading e dall&#8217;economia) che possono essere utilizzati in modo creativo per cercare di trovare un edge/vantaggio.</span></p><p><span>Questo post mira a influenzare le persone a guardare oltre i grafici dei prezzi ed effettuare analisi e backtesting con fonti di dati alternative. Quindi, senza ulteriori indugi, iniziamo con le sorgenti dati di Quandl. </span></p>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-fb635fb elementor-widget elementor-widget-heading" data-id="fb635fb" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h2 class="elementor-heading-title elementor-size-default">Cos'è Quandl?</h2>		</div>
				</div>
				<div class="elementor-element elementor-element-28b48ea elementor-widget elementor-widget-text-editor" data-id="28b48ea" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p><span>Lanciato nel 2013 e con sede a Toronto, Quandl è un marketplace per set di dati finanziari, economici e altri settori. Hanno moltissime sorgenti di dati, sia gratuite che premium, e da sottolineare che i dati gratuiti non sono di bassa qualità! Esiste una pletora di eccellenti database contenenti dati fondamentali ed esotici gratuiti come le statistiche ufficiali del governo dell&#8217;ONS nel Regno Unito o la FRED negli Stati Uniti, il rapporto sul COT, dati finanziari di fine giornata e molto, molto altro ancora. Se hai la disponibilità, puoi anche dare un&#8217;occhiata ai set di dati premium. Il solo limite è il cielo. </span></p><p><span>Per ulteriori informazioni, visitare:  </span><a href="https://www.quandl.com/" target="_blank" rel="noopener"><span>https://www.quandl.com/</span></a></p>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-9e0fca1 elementor-widget elementor-widget-heading" data-id="9e0fca1" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h2 class="elementor-heading-title elementor-size-default">Come trovare i dati</h2>		</div>
				</div>
				<div class="elementor-element elementor-element-badf04d elementor-widget elementor-widget-text-editor" data-id="badf04d" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p><span>Se ho stuzzicato il tuo interesse e vuoi mettere le mani su alcuni di questi dati, ci sono alcuni modi per farlo. Se sai cosa stai cercando, puoi utilizzare la normale casella di ricerca e premere la scheda Quandl. </span></p>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-b0f27bd elementor-widget elementor-widget-image" data-id="b0f27bd" data-element_type="widget" data-widget_type="image.default">
				<div class="elementor-widget-container">
								<div class="elementor-image">
									<figure class="wp-caption">
										<img width="600" height="335" src="https://datatrading.info/wp-content/uploads/trading-algoritmico-tradingview-Quandl-Tab-Web.png" class="attachment-large size-large" alt="trading-algoritmico-tradingview-Quandl-Tab-Web" loading="lazy" srcset="https://datatrading.info/wp-content/uploads/trading-algoritmico-tradingview-Quandl-Tab-Web.png 600w, https://datatrading.info/wp-content/uploads/trading-algoritmico-tradingview-Quandl-Tab-Web-300x168.png 300w, https://datatrading.info/wp-content/uploads/trading-algoritmico-tradingview-Quandl-Tab-Web-160x89.png 160w" sizes="(max-width: 600px) 100vw, 600px" />											<figcaption class="widget-image-caption wp-caption-text">Nota: non aprire la ricerca e inizia subito a digitare. Per impostazione predefinita, i risultati di Quandl NON vengono restituiti a meno che non si selezioni la scheda "Quandl".</figcaption>
										</figure>
								</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-ad3ae98 elementor-widget elementor-widget-text-editor" data-id="ad3ae98" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p><span>Detto questo, nel momento in cui scrivo questo articolo, ho notato che la ricerca spesso non restituisce i risultati che cerco. Ad esempio, se sta cercando di recuperare i dati sull&#8217;open interest dal rapporto COT per la sterlina britannica e si effettua una  semplicemente ricerca con le parole &#8220;Pound&#8221;, &#8220;British Pound&#8221; o &#8220;BP&#8221;, non si troveraà quello che si sta cercando!  </span></p><p><span>Per trovarlo, è necessario  filtrare l&#8217;elenco e selezionare  il provider &#8220;CFTC&#8221;:</span></p>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-5fc4047 elementor-widget elementor-widget-image" data-id="5fc4047" data-element_type="widget" data-widget_type="image.default">
				<div class="elementor-widget-container">
								<div class="elementor-image">
												<img width="600" height="320" src="https://datatrading.info/wp-content/uploads/trading-algoritmico-tradingview-Quandle-Providers-List-Filter.png" class="attachment-large size-large" alt="trading-algoritmico-tradingview-Quandle-Providers-List-Filter" loading="lazy" srcset="https://datatrading.info/wp-content/uploads/trading-algoritmico-tradingview-Quandle-Providers-List-Filter.png 600w, https://datatrading.info/wp-content/uploads/trading-algoritmico-tradingview-Quandle-Providers-List-Filter-300x160.png 300w, https://datatrading.info/wp-content/uploads/trading-algoritmico-tradingview-Quandle-Providers-List-Filter-160x85.png 160w" sizes="(max-width: 600px) 100vw, 600px" />														</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-d7de19d elementor-widget elementor-widget-text-editor" data-id="d7de19d" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p><span>Fate attenzione all&#8217;elenco: non  è in ordine alfabetico. Ho impiegato molto tempo per trovare e pescare la CFTC dall&#8217;enorme lista.  </span></p><p><span>Dopo aver selezionato il filtro, una ricerca generale è spesso  sufficiente per trovare ciò che  si stai cercando. Nell&#8217;immagine seguente, i dati COT si trovano  quasi immediatamente cercando la sola parola &#8220;Pound&#8221;.</span></p>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-6d0f0a0 elementor-widget elementor-widget-image" data-id="6d0f0a0" data-element_type="widget" data-widget_type="image.default">
				<div class="elementor-widget-container">
								<div class="elementor-image">
												<img width="600" height="338" src="https://datatrading.info/wp-content/uploads/trading-algoritmico-tradingview-Pound-Found-CFTC-Web.png" class="attachment-large size-large" alt="trading-algoritmico-tradingview-Pound-Found-CFTC-Web" loading="lazy" srcset="https://datatrading.info/wp-content/uploads/trading-algoritmico-tradingview-Pound-Found-CFTC-Web.png 600w, https://datatrading.info/wp-content/uploads/trading-algoritmico-tradingview-Pound-Found-CFTC-Web-300x169.png 300w, https://datatrading.info/wp-content/uploads/trading-algoritmico-tradingview-Pound-Found-CFTC-Web-160x90.png 160w" sizes="(max-width: 600px) 100vw, 600px" />														</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-e10e54c elementor-widget elementor-widget-text-editor" data-id="e10e54c" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p><span>Se si conosce esattamente cosa  si stai cercando, si può anche inserire direttamente l&#8217;id ticker (in questo esempio l&#8217;id ticker è TIFF_CME_BP_ALL) e non è necessario filtrare l&#8217;elenco. Tuttavia, ogni set di dati in Quandl prevede quasi sempreun proprio formato, quindi ci sono poche possibilità che si indovini il corretto ticker a meno non si abbia già familiarità con il formato generale dei fornitori di dati. </span></p><p><span>Infine, l&#8217;ultima opzione è la possibilità di  navigare nel sito di Quandl! Ogni set di dati ha la propria documentazione che fornisce l&#8217;esatto ID ticker. Inoltre, navigando, si scoprono alcuni fantastici set di dati che non avevi mai pensato di prendere in considerazione. Non sappiamo usare ciò che non sappiamo esistere. </span></p>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-656726c elementor-widget elementor-widget-heading" data-id="656726c" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h2 class="elementor-heading-title elementor-size-default">Applicazione pratica</h2>		</div>
				</div>
				<div class="elementor-element elementor-element-493b8f9 elementor-widget elementor-widget-text-editor" data-id="493b8f9" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				Per fare in modo che questo articolo abbia un valore leggermente maggiore rispetto al semplice guida di come eseguire una ricerca di base,  possiamo descrive come progettare e codificare un indicatore che utilizza i dati forniti da Quandl. Per concludere, lo metteremo alla prova in una strategia per vedere quanto sia utile.

<em>Dichiarazione di non responsabilità: mentre scrivo non ho idea se la mia idea produrrà buoni risultati. Vi presenterò i risultati ottenuti, indipendentemente che siano buoni o cattivi. Lo scopo di questo post è ispirarti a essere creativo, ottenere dati che non sono sul tuo grafico e vedere se riesci a generare qualche vantaggio!.</em>
<h4>L&#8217;indicatore</h4>
Dopo aver sfogliato il sito web di Quandl, ho notato qualcosa che ha attirato la mia attenzione. La borsa London Metals fornisce dati giornalieri per alluminio, rame e zinco,  gratuitamente. Questo mi ha dato l&#8217;idea di sviluppare un indicatore che monitorerà le scorte globali e misurerà la variazione giornaliera dell&#8217;offerta. In economia si definisce che il prezzo è determinato da 2 fattori, domanda e offerta, quindi non sarebbe utile avere un buon indicatore su un lato dell&#8217;equazione? Costruiamo l&#8217;indicatore e proviamo a scoprirlo!
<h4>Il Codice</h4>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-4e1292c elementor-widget elementor-widget-bdt-source-code" data-id="4e1292c" data-element_type="widget" data-widget_type="bdt-source-code.default">
				<div class="elementor-widget-container">
			
        <div class="bdt-source-code prism-okaidia">

            
            <pre class="language-markup">
            <code>//@version=3
study(&quot;LME Inventories Indicator&quot;, overlay=false)

//Add an input for Metal Selection
metal = input(defval=&#039;CU&#039;, title=&#039;Metal&#039;, options=[&#039;AL&#039;,&#039;CU&#039;,&#039;ZI&#039;])

// Create sym
stBase = &#039;QUANDL:LME/ST_&#039;
stSym = stBase + metal + &#039;_ALL&#039;

//Get the data
st = security(stSym,&#039;D&#039;, close[0])

//Calc the percentage change
stChange = ((st[0] - st[1]) / st[1]) * 100

//Setup Colors
stCol = if stChange &gt; 0
    red
else
    green
plot(stChange, title=&#039;Inventory Level Changes (In %)&#039;, color=stCol,linewidth=3,style=columns)</code>
        </pre>

        </div>
		</div>
				</div>
				<div class="elementor-element elementor-element-6a86a8d elementor-widget elementor-widget-text-editor" data-id="6a86a8d" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				Il codice precedente è abbastanza semplice. Stiamo semplicemente creando un input per selezionare il metallo di scelta, ottenendo i dati e calcolando la variazione dei livelli di inventario tramite i dati del giorno prima.

Se hai appena iniziato con Tradingview e Pinescript, di seguito puoi leggere alcuni tutorial per principianti:
<ol>
 	<li><a href="https://datatrading.info/tradingview-il-primo-script/" target="_blank" rel="noopener">Tradingview: primo script</a></li>
 	<li><a href="https://datatrading.info/creare-un-indicatore-con-tradingview/" target="_blank" rel="noopener">Tradingview: crea un indicatore</a></li>
</ol>
I dettagli della struttura del ticker per il London Metals Exchange possono essere trovati sul sito web di Quandl, tramite il seguente il link, insieme ai dettagli degli altri dati disponibili dal LME. :
<ol>
 	<li><a href="https://www.quandl.com/data/LME-London-Metal-Exchange/documentation/documentation" target="_blank" rel="noopener">Documentazione di Quandl LME</a></li>
</ol>
<div>
<h4>Sul grafico</h4>
Dopo aver aggiunto il codice di seguito a un grafico, dovresti ottenere un output simile al seguente.

</div>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-3f0f9e5 elementor-widget elementor-widget-image" data-id="3f0f9e5" data-element_type="widget" data-widget_type="image.default">
				<div class="elementor-widget-container">
								<div class="elementor-image">
												<img width="600" height="138" src="https://datatrading.info/wp-content/uploads/trading-algoritmico-tradingview-Supply-and-Demand-Web.png" class="attachment-large size-large" alt="" loading="lazy" srcset="https://datatrading.info/wp-content/uploads/trading-algoritmico-tradingview-Supply-and-Demand-Web.png 600w, https://datatrading.info/wp-content/uploads/trading-algoritmico-tradingview-Supply-and-Demand-Web-300x69.png 300w, https://datatrading.info/wp-content/uploads/trading-algoritmico-tradingview-Supply-and-Demand-Web-160x37.png 160w" sizes="(max-width: 600px) 100vw, 600px" />														</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-14dec81 elementor-widget elementor-widget-text-editor" data-id="14dec81" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p>Quei picchi regolari nell&#8217;offerta sembrano interessanti!</p>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-b2a7b9f elementor-widget elementor-widget-heading" data-id="b2a7b9f" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h2 class="elementor-heading-title elementor-size-default">La strategia</h2>		</div>
				</div>
				<div class="elementor-element elementor-element-de3238a elementor-widget elementor-widget-text-editor" data-id="de3238a" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p><span style="color: var( --e-global-color-text ); font-size: 1rem;">Per le regole della nostra strategia, torniamo ai concetti base dell&#8217;economia. Una diminuzione dell&#8217;offerta dovrebbe far aumentare il prezzo (supponendo che la domanda rimanga la stessa). Al contrario, un aumento dell&#8217;offerta dovrebbe causare un calo del prezzo. Con questo in mente, e dato che quei picchi sembrano estremi, penso che abbiamo le basi della nostra strategia!</span></p><p>Come abbiamo notato sopra, sembrano esserci periodi regolari di rifornimento massiccio seguiti da riduzioni giornaliere graduali fino a un altro rifornimento di scorte globali. Pertanto, la strategia cercherà di shortare il rame ogni volta che l&#8217;offerta di rame aumenta del 10% o più. Chiuderemo la strategia quando l&#8217;ammontare degli aumenti giornalieri dell&#8217;offerta sarà uguale o scenderà al di sotto dello 0%. Per sicurezza, si introduce uno stop al prezzo massimo dei dati giornalieri.</p><h4>Il codice</h4>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-799814e elementor-widget elementor-widget-bdt-source-code" data-id="799814e" data-element_type="widget" data-widget_type="bdt-source-code.default">
				<div class="elementor-widget-container">
			
        <div class="bdt-source-code prism-okaidia">

            
            <pre class="language-markup">
            <code>// @ versione = 3
strategy (title = &quot;Global Metal Inventories Strategy&quot;, overlay = true, default_qty_type = strategy.percent_of_equity, default_qty_value = 10)

// Aggiunge un input per Metal Selection
metal = input (defval = &#039;CU&#039;, title = &#039;Metal&#039;, options = [&#039;AL&#039;, &#039;CU&#039;, &#039;ZI&#039;])

// Crea syms
stBase = &#039;QUANDL: LME / ST_&#039;
stSym = stBase + metal + &#039;_ALL&#039;

// Ottieni dati
st = security (stSym, &#039;D&#039;, close [0])

// Recupera i dati per il grafico corrente
stHigh = sicurezza (ticker, &quot;D&quot;, high [0])

stChange = ((st [0] - st [1]) / st [1]) * 100

shortConditionOne = stChange&gt; 10
if (shortConditionOne)
    strategy.entry (&quot;Oversupply&quot;, strategy.short, stop = stHigh [0])
    
closeConditionOne = stChange &lt;= 0
if (closeConditionOne)
    strategy.close (&quot;Oversupply&quot;)</code>
        </pre>

        </div>
		</div>
				</div>
				<div class="elementor-element elementor-element-957473a elementor-widget elementor-widget-text-editor" data-id="957473a" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p><span>Per trasformare l&#8217;indicatore in una strategia, dobbiamo sacrificare il grafico dell&#8217;indicatore. Questo perché l&#8217;indicatore gira su una sottotrama (sotto il grafico principale) ma la strategia deve scrivere sul grafico principale per le entrate e le uscite. Comunque, questo non ha molta importanza dato che possiamo sempre caricare anche una versione dell&#8217;indicatore sul grafico.</span></p><p><i><span>Nota: possiamo anche rimuovere l&#8217; istruzione </span><b><span>IF </span></b><span> per l&#8217;impostazione dei colori poiché non ci sarà il grafico. </span></i></p><p><span>Oltre a questi due elementi, possiamo semplicemente copiare e incollare il resto del codice dell&#8217;indicatore in un nuovo script di strategia ed estenderlo per includere le condizioni di ingresso e di uscita. Le condizioni sono definite nello stesso modo in cui abbiamo fatto in:  </span><a href="https://datatrading.info/tradingview-il-primo-script/" target="_blank" rel="noopener"><span>Tradingview: Primo Script</span></a></p><p><span>Nel codice appena descritto si considera solo il lato short, quindi ho creato una condizione di chiusura invece di una condizione long opposta. </span></p>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-c22a6c7 elementor-widget elementor-widget-heading" data-id="c22a6c7" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h2 class="elementor-heading-title elementor-size-default">I Risultati</h2>		</div>
				</div>
				<div class="elementor-element elementor-element-0074e79 elementor-widget elementor-widget-image" data-id="0074e79" data-element_type="widget" data-widget_type="image.default">
				<div class="elementor-widget-container">
								<div class="elementor-image">
												<img width="600" height="200" src="https://datatrading.info/wp-content/uploads/trading-algoritmico-tradingview-Strategy-Results-Web.png" class="attachment-large size-large" alt="trading-algoritmico-tradingview-Strategy-Results-Web" loading="lazy" srcset="https://datatrading.info/wp-content/uploads/trading-algoritmico-tradingview-Strategy-Results-Web.png 600w, https://datatrading.info/wp-content/uploads/trading-algoritmico-tradingview-Strategy-Results-Web-300x100.png 300w, https://datatrading.info/wp-content/uploads/trading-algoritmico-tradingview-Strategy-Results-Web-160x53.png 160w" sizes="(max-width: 600px) 100vw, 600px" />														</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-792bedb elementor-widget elementor-widget-text-editor" data-id="792bedb" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p>A prima vista i risultati sono incredibili! Una percentuale di vittorie del 100%. Tuttavia, prima di darmi una pacca sulla spalla, vale la pena notare che sono stati effettuati solo 8 scambi. I dati disponibili non risalgono abbastanza indietro per testare di più. 8 operazioni non sono dati sufficienti per creare fiducia in una strategia ma, come ho detto prima, non è questo il punto di questo post. Tuttavia, terrò conto di questo passo avanti.  </p>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-25e0607 elementor-widget elementor-widget-image" data-id="25e0607" data-element_type="widget" data-widget_type="image.default">
				<div class="elementor-widget-container">
								<div class="elementor-image">
												<img width="800" height="467" src="https://datatrading.info/wp-content/uploads/trading-algoritmico-tradingview-Strategy-Results-Web-Trades.jpg" class="attachment-large size-large" alt="" loading="lazy" srcset="https://datatrading.info/wp-content/uploads/trading-algoritmico-tradingview-Strategy-Results-Web-Trades.jpg 800w, https://datatrading.info/wp-content/uploads/trading-algoritmico-tradingview-Strategy-Results-Web-Trades-300x175.jpg 300w, https://datatrading.info/wp-content/uploads/trading-algoritmico-tradingview-Strategy-Results-Web-Trades-160x93.jpg 160w, https://datatrading.info/wp-content/uploads/trading-algoritmico-tradingview-Strategy-Results-Web-Trades-768x448.jpg 768w" sizes="(max-width: 800px) 100vw, 800px" />														</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-0c5cd20 elementor-widget elementor-widget-text-editor" data-id="0c5cd20" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p><span>E questo è tutto. Inizia a navigare nel sito di </span><span>Quandl per vedere se riesci a trovare dati interessanti che possono darti un vantaggio nei mercati. </span></p>					</div>
						</div>
				</div>
						</div>
					</div>
		</div>
								</div>
					</div>
		</section>
									</div>
			</div>
					</div>
		<p>L'articolo <a rel="nofollow" href="https://datatrading.info/tradingview-aggiunger-una-sorgente-dati-di-quandl/">TradingView: Aggiunger una sorgente dati di Quandl</a> proviene da <a rel="nofollow" href="https://datatrading.info">Data Trading</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Tradingview: Indicatore di forza di una valuta</title>
		<link>https://datatrading.info/tradingview-indicatore-di-forza-di-una-valuta/</link>
		
		<dc:creator><![CDATA[Gianluca]]></dc:creator>
		<pubDate>Thu, 28 Feb 2019 18:53:00 +0000</pubDate>
				<category><![CDATA[ToolBox Tradingview]]></category>
		<category><![CDATA[Toolbox Tradingview]]></category>
		<guid isPermaLink="false">https://datatrading.info/?p=3258</guid>

					<description><![CDATA[<p>Quando effettuiamo un&#8217;operazione nel mercato Forex, stiamo applicando la nostra analisi contemporaneamente su due economie. In altre parole, stiamo scommettendo che un&#8217;economia è, o sarà, più forte dell&#8217;altra. Prima di effettuare un&#8217;operazione sarebbe utile validare la nostra analisi osservando la forza complessiva di entrambe le valute nella coppia che stiamo per negoziare. Dopo tutto, se una valuta nella &#8230;</p>
<p class="read-more"> <a class="" href="https://datatrading.info/tradingview-indicatore-di-forza-di-una-valuta/"> <span class="screen-reader-text">Tradingview: Indicatore di forza di una valuta</span> Leggi tutto »</a></p>
<p>L'articolo <a rel="nofollow" href="https://datatrading.info/tradingview-indicatore-di-forza-di-una-valuta/">Tradingview: Indicatore di forza di una valuta</a> proviene da <a rel="nofollow" href="https://datatrading.info">Data Trading</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="3258" class="elementor elementor-3258">
						<div class="elementor-inner">
				<div class="elementor-section-wrap">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-0318148 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="0318148" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
							<div class="elementor-row">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-662a2ce" data-id="662a2ce" data-element_type="column">
			<div class="elementor-column-wrap elementor-element-populated">
							<div class="elementor-widget-wrap">
						<div class="elementor-element elementor-element-2c8410b elementor-widget elementor-widget-text-editor" data-id="2c8410b" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p>Quando effettuiamo un&#8217;operazione nel mercato Forex, stiamo applicando la nostra analisi contemporaneamente su due economie. In altre parole, stiamo scommettendo che un&#8217;economia è, o sarà, più forte dell&#8217;altra. Prima di effettuare un&#8217;operazione sarebbe utile validare la nostra analisi osservando la forza complessiva di entrambe le valute nella coppia che stiamo per negoziare. Dopo tutto, se una valuta nella coppia è debole rispetto a tutte le principali valute, è probabile che sia debole nella coppia che si vuole negoziare. Con questo approccio, un indicatore della forza della valuta potrebbe essere uno strumento utile per la nostra analisi. Per il dollaro USA potrebbe non essere necessario dato che possiamo usare l&#8217;indice USDOLLAR per misurare la forza dell&#8217;USD, ma come fare per le altre valute?</p>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-944e1d1 elementor-widget elementor-widget-heading" data-id="944e1d1" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h2 class="elementor-heading-title elementor-size-default">Indicatore di forza della valuta</h2>		</div>
				</div>
				<div class="elementor-element elementor-element-cb6e5f7 elementor-widget elementor-widget-text-editor" data-id="cb6e5f7" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p>L&#8217;indicatore della forza valutaria prende in considerazione fino a 4 coppie di valute e calcola la variazione percentuale media rispetto al timeframe giornaliero. Quindi traccerà il grafico di tutte le coppie insieme a una linea aggregata che indica la forza complessiva. È disponibile un&#8217;opzione per contrassegnare una valuta come controvaluta in modo che la variazione percentuale sia invertita. </p><p>Si consideri il seguente esempio. Si vuole conoscere la forza della sterlina britannica. Nella maggior parte delle coppie la sterlina è la valuta di base tranne che contro l&#8217;euro. Ciò significa che quando l&#8217;EURGBP sale, la sterlina si sta indebolendo e viceversa. Pertanto, per ottenere una lettura accurata, bisogna di contrassegnare la sterlina come controvaluta e invertire il risultato della variazione percentuale.</p>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-132b26b elementor-widget elementor-widget-heading" data-id="132b26b" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h2 class="elementor-heading-title elementor-size-default">Codice Pinescript</h2>		</div>
				</div>
				<div class="elementor-element elementor-element-f6f296e elementor-widget elementor-widget-bdt-source-code" data-id="f6f296e" data-element_type="widget" data-widget_type="bdt-source-code.default">
				<div class="elementor-widget-container">
			
        <div class="bdt-source-code prism-okaidia">

                            <button class="bdt-copy-button">Copy                </button>
            
            <pre class="language-c">
            <code>//@version=3
study(title=&quot;Currency Strength&quot;, shorttitle=&quot;CUR-STR&quot;, precision=4, scale=scale.left)
 
sym1 = input(title=&#039;FX Pair 1&#039;, type=symbol, defval=&#039;OANDA:GBPUSD&#039;)
sym1_counter = input(title=&#039;Counter Currency?&#039;, type=bool, defval=false)
sym2 = input(title=&#039;FX Pair 2&#039;, type=symbol, defval=&#039;OANDA:EURGBP&#039;)
sym2_counter = input(title=&#039;Counter Currency?&#039;, type=bool, defval=true)
sym3 = input(title=&#039;FX Pair 3&#039;, type=symbol, defval=&#039;OANDA:GBPJPY&#039;)
sym3_counter = input(title=&#039;Counter Currency?&#039;, type=bool, defval=false)
sym4 = input(title=&#039;FX Pair 4&#039;, type=symbol, defval=&#039;OANDA:GBPCHF&#039;)
sym4_counter = input(title=&#039;Counter Currency?&#039;, type=bool, defval=false)
 
 
inst1_daily = security(sym1, &quot;D&quot;, close[1], lookahead=barmerge.lookahead_on)
inst2_daily = security(sym2, &quot;D&quot;, close[1], lookahead=barmerge.lookahead_on)
inst3_daily = security(sym3, &quot;D&quot;, close[1], lookahead=barmerge.lookahead_on)
inst4_daily = security(sym4, &quot;D&quot;, close[1], lookahead=barmerge.lookahead_on)
 
 
inst1_current = security(sym1, period, close)
inst2_current = security(sym2, period, close)
inst3_current = security(sym3, period, close)
inst4_current = security(sym4, period, close)
 
inst1_change = ((inst1_current - inst1_daily) / inst1_daily) * 100
inst2_change = ((inst2_current - inst2_daily) / inst2_daily) * 100
inst3_change = ((inst3_current - inst3_daily) / inst3_daily) * 100
inst4_change = ((inst4_current - inst4_daily) / inst4_daily) * 100
 
 
inst1_change := sym1_counter == true ? inst1_change * -1 : inst1_change
inst2_change := sym2_counter == true ? inst2_change * -1 : inst2_change
inst3_change := sym3_counter == true ? inst3_change * -1 : inst3_change
inst4_change := sym4_counter == true ? inst4_change * -1 : inst4_change
    
overall_strength = (inst1_change + inst2_change + inst3_change + inst4_change) / 4
 
plot(inst1_change,title=&#039;Sym1&#039;, color=lime, style=area, transp=80)
plot(inst2_change,title=&#039;Sym2&#039;, color=blue, style=area, transp=90)
plot(inst3_change,title=&#039;Sym3&#039;, color=red, style=area, transp=90)
plot(inst4_change,title=&#039;Sym4&#039;, color=purple, style=area, transp=90)
 
plot(overall_strength,title=&#039;Overall Strength&#039;, color=black, linewidth=3, style=line)
 
// Test Plots
// ------------------
// plot(inst1_daily)
// plot(inst2_daily)
// plot(inst3_daily)
// plot(inst4_daily)
 
// plot(inst1_current)
// plot(inst2_current)
// plot(inst3_current)
// plot(inst4_current)</code>
        </pre>

        </div>
		</div>
				</div>
				<div class="elementor-element elementor-element-1ba13ad elementor-widget elementor-widget-heading" data-id="1ba13ad" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h4 class="elementor-heading-title elementor-size-default">Breve commento</h4>		</div>
				</div>
				<div class="elementor-element elementor-element-a597440 elementor-widget elementor-widget-text-editor" data-id="a597440" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p>Se ti stai chiedendo perché ho usato il lookahead e vuoi saperne di più, ho scritto un post che descrive il lookhead in modo più dettagliato: <a href="https://datatrading.info/tradingview-dati-lookahead-dati-storici-e-dati-realtime/" target="_blank" rel="noopener noreferrer">Tradingview: Comprensione di lookahead, dati storici e in tempo reale</a></p><p>Inoltre, l&#8217;utilizzo della funzione <b><i>security()</i></b> per ottenere dati di un diverso timeframe o un diverso strumento è descritto in modo approfondito in questo articolo: <a href="https://datatrading.info/creare-un-indicatore-con-tradingview/" target="_blank" rel="noopener noreferrer">Tradingview: creare un indicatore</a></p><p>Il resto del codice calcola solo la variazione percentuale e la forza complessiva della valuta. Se sei interessato alla matematica alla base del calcolo di una variazione percentuale, posso indicarti <a href="https://www.skillsyouneed.com/num/percent-change.html" target="_blank" rel="noopener noreferrer">questo tutorial</a>.</p><p>Prima di andare avanti, penso che valga la pena sottolineare le motivazioni dell&#8217;uso dei parametri &#8220;style&#8221; e &#8220;transp&#8221; per tutti i grafici tranne che per &#8220;forza complessiva&#8221;. In questo modo si evita che l&#8217;indicatore sia troppo &#8220;affollato&#8221;. Inoltre, secondo me, la linea della &#8220;forza complessiva&#8221; è la trama più importante ed ero preoccupato che potesse essere mascherata o di difficile da leggere.</p><h4>Aggiunta di un&#8217;altra valuta</h4><p>Se si ritiene che 4 coppie di valute non siano sufficienti, si può facilmente aggiungerne altre. Come si può vedere dal codice, abbiamo 6 passaggi fondamentali:</p><ol><li>Selezione delle coppie di valute.</li><li>Ricavare la chiusura giornaliera per quelle coppie</li><li>Ricavare l&#8217;ultimo prezzo di chiusura nel timeframe considerato</li><li>Calcolare la differenza tra il prezzo di chiusura corrente e la chiusura daily</li><li>Mediare le differenze tra loro</li><li>Tracciare i grafici dei risultati.</li></ol><p>Pertanto per aggiungere un&#8217;altra coppia di valute all&#8217;indicatore si prevedono i seguenti passi:</p><ul><li>Innanzitutto, aggiungere i nuovi input per la coppia da considerare. Assicurarsi di creare nuovi nomi di variabili e valori predefiniti. Ad esempio sym5 come segue </li></ul>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-ae1e087 elementor-widget elementor-widget-bdt-source-code" data-id="ae1e087" data-element_type="widget" data-widget_type="bdt-source-code.default">
				<div class="elementor-widget-container">
			
        <div class="bdt-source-code prism-okaidia">

                            <button class="bdt-copy-button">Copy                </button>
            
            <pre class="language-c">
            <code>sym5 = input(title=&#039;FX Pair 5&#039;, type=symbol, defval=&#039;OANDA:GBPAUD&#039;)
sym5_counter = input(title=&#039;Counter Currency?&#039;, type=bool, defval=false)</code>
        </pre>

        </div>
		</div>
				</div>
				<div class="elementor-element elementor-element-de0df50 elementor-widget elementor-widget-text-editor" data-id="de0df50" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<ul><li><span>Ricavare i dati per il timeframe giornaliero e per il timeframe corrente per la coppia. Anche in questo caso bisogna fare attenzione ad aggiornare i nomi delle variabili e i parametri </span><em><strong><span>security()</span></strong></em></li></ul>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-f5ac045 elementor-widget elementor-widget-bdt-source-code" data-id="f5ac045" data-element_type="widget" data-widget_type="bdt-source-code.default">
				<div class="elementor-widget-container">
			
        <div class="bdt-source-code prism-okaidia">

                            <button class="bdt-copy-button">Copy                </button>
            
            <pre class="language-c">
            <code>inst5_daily = security(sym5, &quot;D&quot;, close[1], lookahead=barmerge.lookahead_on)
inst5_current = security(sym5, period, close)</code>
        </pre>

        </div>
		</div>
				</div>
				<div class="elementor-element elementor-element-65c6d49 elementor-widget elementor-widget-text-editor" data-id="65c6d49" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<ul><li><span>Calcolare la variazione e invertire il ​​valore se si sta utilizzando una controvaluta. Se si ottiene un errore dove si segnala che inst5_change è già dichiarato, bisogna osservare l&#8217;operatore &#8220;</span><strong><span>:=</span></strong><span> &#8220;. Per aggiornare una variabile già dichiarata, è necessario aggiungere i due punti &#8220;:&#8221; davanti all&#8217;operatore di uguale.</span></li></ul>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-1e9d35b elementor-widget elementor-widget-bdt-source-code" data-id="1e9d35b" data-element_type="widget" data-widget_type="bdt-source-code.default">
				<div class="elementor-widget-container">
			
        <div class="bdt-source-code prism-okaidia">

                            <button class="bdt-copy-button">Copy                </button>
            
            <pre class="language-c">
            <code>inst5_change = ((inst5_current - inst5_daily) / inst5_daily) * 100
 
inst5_change := if sym5_counter == true
    inst5_change * -1</code>
        </pre>

        </div>
		</div>
				</div>
				<div class="elementor-element elementor-element-464f3e7 elementor-widget elementor-widget-text-editor" data-id="464f3e7" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<ul><li><span>Infine si aggiunge la nuova coppia al calcolo della forza complessiva e si traccia il grafico.</span></li></ul>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-4bd7589 elementor-widget elementor-widget-bdt-source-code" data-id="4bd7589" data-element_type="widget" data-widget_type="bdt-source-code.default">
				<div class="elementor-widget-container">
			
        <div class="bdt-source-code prism-okaidia">

                            <button class="bdt-copy-button">Copy                </button>
            
            <pre class="language-c">
            <code>overall_strength = (inst1_change + inst2_change + inst3_change + inst4_change + inst5_change) / 5

plot(inst5_change,title=&#039;Sym5&#039;, color=yellow, style=area, transp=80)</code>
        </pre>

        </div>
		</div>
				</div>
				<div class="elementor-element elementor-element-7e9c500 elementor-widget elementor-widget-heading" data-id="7e9c500" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h2 class="elementor-heading-title elementor-size-default">Risultati</h2>		</div>
				</div>
				<div class="elementor-element elementor-element-ef87dde elementor-widget elementor-widget-text-editor" data-id="ef87dde" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p>Di seguito si riporta il risultato dello script descritto in precedenza</p>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-a3f8386 elementor-widget elementor-widget-image" data-id="a3f8386" data-element_type="widget" data-widget_type="image.default">
				<div class="elementor-widget-container">
								<div class="elementor-image">
												<img width="600" height="325" src="https://datatrading.info/wp-content/uploads/trading-algoritmico-tradingview-Default-Currency-Strength-Indicator.png" class="attachment-large size-large" alt="trading-algoritmico-tradingview-Default-Currency-Strength-Indicator" loading="lazy" srcset="https://datatrading.info/wp-content/uploads/trading-algoritmico-tradingview-Default-Currency-Strength-Indicator.png 600w, https://datatrading.info/wp-content/uploads/trading-algoritmico-tradingview-Default-Currency-Strength-Indicator-300x163.png 300w, https://datatrading.info/wp-content/uploads/trading-algoritmico-tradingview-Default-Currency-Strength-Indicator-160x87.png 160w" sizes="(max-width: 600px) 100vw, 600px" />														</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-c44490b elementor-widget elementor-widget-heading" data-id="c44490b" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h2 class="elementor-heading-title elementor-size-default">Esempi di utilizzo e suggerimenti</h2>		</div>
				</div>
				<div class="elementor-element elementor-element-1d15b69 elementor-widget elementor-widget-heading" data-id="1d15b69" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h4 class="elementor-heading-title elementor-size-default">Impostazione di 2 indicatori per confrontare la forza</h4>		</div>
				</div>
				<div class="elementor-element elementor-element-199e016 elementor-widget elementor-widget-text-editor" data-id="199e016" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p><span>L&#8217;esempio mostra la coppia GBPJPY con un indicatore della forza della valuta GBP e un indicatore della forza della valuta JPY. </span><span>Entrambe le valute si stanno rafforzando. </span><span>Tuttavia, lo JPY sta mostrando più forza e di conseguenza GBPJPY è ribassista.</span></p>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-c3b78b9 elementor-widget elementor-widget-image" data-id="c3b78b9" data-element_type="widget" data-widget_type="image.default">
				<div class="elementor-widget-container">
								<div class="elementor-image">
												<img width="600" height="328" src="https://datatrading.info/wp-content/uploads/trading-algoritmico-tradingview-JPY-forza-GBP-forza.png" class="attachment-large size-large" alt="trading-algoritmico-tradingview-JPY-forza-GBP-forza" loading="lazy" srcset="https://datatrading.info/wp-content/uploads/trading-algoritmico-tradingview-JPY-forza-GBP-forza.png 600w, https://datatrading.info/wp-content/uploads/trading-algoritmico-tradingview-JPY-forza-GBP-forza-300x164.png 300w, https://datatrading.info/wp-content/uploads/trading-algoritmico-tradingview-JPY-forza-GBP-forza-160x87.png 160w" sizes="(max-width: 600px) 100vw, 600px" />														</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-84a8123 elementor-widget elementor-widget-heading" data-id="84a8123" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h4 class="elementor-heading-title elementor-size-default">Identificare le tendenze opposte</h4>		</div>
				</div>
				<div class="elementor-element elementor-element-6726fb2 elementor-widget elementor-widget-text-editor" data-id="6726fb2" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p>Il seguente esempio mostra come tendenze opposte possono accelerare i movimenti dei prezzi. In questo caso, il GBP inizia a diventare più forte, mentre allo stesso tempo il USD inizia a indebolirsi. Ciò provoca un aumento costante dei prezzi seguito da un balzo finale</p>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-825dc9b elementor-widget elementor-widget-image" data-id="825dc9b" data-element_type="widget" data-widget_type="image.default">
				<div class="elementor-widget-container">
								<div class="elementor-image">
												<img width="600" height="327" src="https://datatrading.info/wp-content/uploads/trading-algoritmico-tradingview-Opposing-Trends.png" class="attachment-large size-large" alt="trading-algoritmico-tradingview-Opposing-Trends" loading="lazy" srcset="https://datatrading.info/wp-content/uploads/trading-algoritmico-tradingview-Opposing-Trends.png 600w, https://datatrading.info/wp-content/uploads/trading-algoritmico-tradingview-Opposing-Trends-300x164.png 300w, https://datatrading.info/wp-content/uploads/trading-algoritmico-tradingview-Opposing-Trends-160x87.png 160w" sizes="(max-width: 600px) 100vw, 600px" />														</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-e9c51bf elementor-widget elementor-widget-heading" data-id="e9c51bf" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h4 class="elementor-heading-title elementor-size-default">Impostazione per JPY e verifica dell'output</h4>		</div>
				</div>
				<div class="elementor-element elementor-element-e855e45 elementor-widget elementor-widget-text-editor" data-id="e855e45" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p><span>Infine, ecco uno screenshot di come impostare l&#8217;indicatore per monitorare la forza dello yen giapponese. In tutti i casi lo JPY è la controvaluta quindi per impostarlo correttamente è necessario aprire la pagina delle impostazioni dell&#8217;indicatore e compilare con le coppie JPY da monitorare, come segue. Per salvare le impostazioni bisogna premere sulla freccia in basso accanto al pulsante dei valori predefiniti e selezionare &#8221; </span><em><strong><span>Salva come predefinito</span></strong></em><span> &#8220;.</span></p>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-a749822 elementor-widget elementor-widget-image" data-id="a749822" data-element_type="widget" data-widget_type="image.default">
				<div class="elementor-widget-container">
								<div class="elementor-image">
												<img width="600" height="327" src="https://datatrading.info/wp-content/uploads/trading-algoritmico-tradingview-JPY-Setup.png" class="attachment-large size-large" alt="trading-algoritmico-tradingview-JPY-Setup" loading="lazy" srcset="https://datatrading.info/wp-content/uploads/trading-algoritmico-tradingview-JPY-Setup.png 600w, https://datatrading.info/wp-content/uploads/trading-algoritmico-tradingview-JPY-Setup-300x164.png 300w, https://datatrading.info/wp-content/uploads/trading-algoritmico-tradingview-JPY-Setup-160x87.png 160w" sizes="(max-width: 600px) 100vw, 600px" />														</div>
						</div>
				</div>
						</div>
					</div>
		</div>
								</div>
					</div>
		</section>
									</div>
			</div>
					</div>
		<p>L'articolo <a rel="nofollow" href="https://datatrading.info/tradingview-indicatore-di-forza-di-una-valuta/">Tradingview: Indicatore di forza di una valuta</a> proviene da <a rel="nofollow" href="https://datatrading.info">Data Trading</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Tradingview: Ricalcolo dopo esecuzione di un ordine</title>
		<link>https://datatrading.info/tradingview-ricalcolo-dopo-esecuzione-di-un-ordine/</link>
		
		<dc:creator><![CDATA[Gianluca]]></dc:creator>
		<pubDate>Sun, 24 Feb 2019 16:22:00 +0000</pubDate>
				<category><![CDATA[ToolBox Tradingview]]></category>
		<category><![CDATA[Toolbox Tradingview]]></category>
		<guid isPermaLink="false">https://datatrading.info/?p=3236</guid>

					<description><![CDATA[<p>Questo post è stato ispirato da una domanda che ho visto di recente su reddit su / r / Forex / . L&#8217;utente chiedeva semplicemente: What does the “Recalculate After Order Filled flag” actually do? In un primo momento, ho pensato che un rapido sguardo all&#8217;help di Tradingview sarebbe sufficiente per trovare la risposta. In questo caso si scopre &#8230;</p>
<p class="read-more"> <a class="" href="https://datatrading.info/tradingview-ricalcolo-dopo-esecuzione-di-un-ordine/"> <span class="screen-reader-text">Tradingview: Ricalcolo dopo esecuzione di un ordine</span> Leggi tutto »</a></p>
<p>L'articolo <a rel="nofollow" href="https://datatrading.info/tradingview-ricalcolo-dopo-esecuzione-di-un-ordine/">Tradingview: Ricalcolo dopo esecuzione di un ordine</a> proviene da <a rel="nofollow" href="https://datatrading.info">Data Trading</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="3236" class="elementor elementor-3236">
						<div class="elementor-inner">
				<div class="elementor-section-wrap">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-d67f08c elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="d67f08c" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
							<div class="elementor-row">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-b8fe069" data-id="b8fe069" data-element_type="column">
			<div class="elementor-column-wrap elementor-element-populated">
							<div class="elementor-widget-wrap">
						<div class="elementor-element elementor-element-e4129cf elementor-widget elementor-widget-text-editor" data-id="e4129cf" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p>Questo post è stato ispirato da una domanda che ho visto di recente su reddit su <a href="https://www.reddit.com/r/Forex/" target="_blank" rel="noopener noreferrer">/ r / Forex /</a> . L&#8217;utente chiedeva semplicemente:</p><blockquote><p><i>What does the “Recalculate After Order Filled flag” actually do?</i></p></blockquote><p>In un primo momento, ho pensato che un rapido sguardo all&#8217;<a href="https://www.tradingview.com/wiki/Strategies" target="_blank" rel="noopener noreferrer">help</a> <span style="color: var( --e-global-color-text ); font-size: 1rem;">di Tradingview </span><span style="color: var( --e-global-color-text ); font-size: 1rem;">sarebbe sufficiente per trovare la risposta. In questo caso si scopre che la documentazione non è così chiara:</span></p><blockquote><p><em>You can set the strategy to perform additional calculation after an order is filled. For this you need to check off “Recalculate After Order filled” in settings or do it in script itself:</em></p></blockquote><p>Questa documentazione <span style="color: var( --e-global-color-text ); font-size: 1rem;"> </span><span style="color: var( --e-global-color-text ); font-size: 1rem;">è un po&#8217; ambigua e </span><span style="color: var( --e-global-color-text ); font-size: 1rem;">lascia spazio ad alcune domande: Di quale calcolo aggiuntivo stiamo parlando? Devo specificare qualcosa da calcolare? È un calcolo speciale documentato altrove?</span></p>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-a908d4c elementor-widget elementor-widget-heading" data-id="a908d4c" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h2 class="elementor-heading-title elementor-size-default">Ricalcola dopo l'esecuzione dell'ordine</h2>		</div>
				</div>
				<div class="elementor-element elementor-element-d5c7c45 elementor-widget elementor-widget-text-editor" data-id="d5c7c45" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p>Prima di dare la mia interpretazione, devo evidenziare che &#8220;ricalcola dopo l&#8217;esecuzione dell&#8217;ordine&#8221; è il nome del flag che si vede nella schermata delle impostazioni della strategia. In realtà nel codice è indicato come &#8220;<b>calc_on_order_fills</b> &#8221; ed è impostato come argomento nella chiamata alla funzione <b><i>strategy()</i></b>.</p>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-43692f3 elementor-widget elementor-widget-image" data-id="43692f3" data-element_type="widget" data-widget_type="image.default">
				<div class="elementor-widget-container">
								<div class="elementor-image">
												<img width="473" height="600" src="https://datatrading.info/wp-content/uploads/tradingview-ricalcolo-dopo-esecuzione-trading-algoritmico.png" class="attachment-large size-large" alt="tradingview-ricalcolo-dopo-esecuzione-trading-algoritmico" loading="lazy" srcset="https://datatrading.info/wp-content/uploads/tradingview-ricalcolo-dopo-esecuzione-trading-algoritmico.png 473w, https://datatrading.info/wp-content/uploads/tradingview-ricalcolo-dopo-esecuzione-trading-algoritmico-237x300.png 237w, https://datatrading.info/wp-content/uploads/tradingview-ricalcolo-dopo-esecuzione-trading-algoritmico-126x160.png 126w" sizes="(max-width: 473px) 100vw, 473px" />														</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-254fce2 elementor-widget elementor-widget-text-editor" data-id="254fce2" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p>In questo modo si effettua il il ricalcolo in questione per l&#8217;intero script, cioè il tuo script viene &#8220;<em>calcolato</em>&#8221; <span style="color: var( --e-global-color-text ); font-size: 1rem;">per ogni barra dei dati storici</span><span style="color: var( --e-global-color-text ); font-size: 1rem;"> disponibili</span><span style="color: var( --e-global-color-text ); font-size: 1rem;">. Quando si attiva il &#8220;</span><em style="color: var( --e-global-color-text ); font-size: 1rem;"><strong>ricalcola dopo che l&#8217;ordine evaso</strong></em><span style="color: var( --e-global-color-text ); font-size: 1rem;">&#8220;, si ricalcola nuovamente lo script ogni volta che </span><span style="color: var( --e-global-color-text ); font-size: 1rem;">un ordine sia stato completamente eseguito. Nell&#8217;</span><span style="color: var( --e-global-color-text ); font-size: 1rem;">emulatore di broker reso disponibile da Tradingview, questo avviene prima della barra successiva.</span></p><h4>Può sembrare un dettaglio trascurabile (o può aumentare notevolmente il rischio)</h4><p>A seconda del contenuto dello script, l&#8217;impostazione &#8220;<i>ricalcola dopo l&#8217;esecuzione dell&#8217;ordine</i>&#8221; (calc_on_order_fills) potrebbe non avere alcun evidente effetto sul risultato dello script, ad esempio le strategie semplici che non prevedono la &#8220;piramidazione&#8221;.</p><p>Dall&#8217;altra parte, può causare un&#8217;esposizione eccessiva perchè si inserendo più ordini sulla stessa barra. Con la piramidazione, viene <span style="color: var( --e-global-color-text ); font-size: 1rem;">piazzato un secondo ordine sulla stessa barra </span><span style="color: var( --e-global-color-text ); font-size: 1rem;">se le condizioni di ingresso sono ancora soddisfatte dopo il &#8220;ricalcolo&#8221;. Secondo me questo annulla l&#8217;effetto della piramidazione.</span></p>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-deacf1c elementor-widget elementor-widget-heading" data-id="deacf1c" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h2 class="elementor-heading-title elementor-size-default">Codice Pinescript</h2>		</div>
				</div>
				<div class="elementor-element elementor-element-80638e8 elementor-widget elementor-widget-text-editor" data-id="80638e8" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p>Per effettuare i primi test possiamo usare una strategia molto, molto semplice. E&#8217; cosi semplice che ho limitato l&#8217;intervallo di backtest a soli 100 giorni in modo che il grafico non venga sovraccaricato da troppi ordini di acquisto e vendita. (si può fare tramite la  parola chiave <b><i>max_bars_back</i></b>)</p>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-114e299 elementor-widget elementor-widget-bdt-source-code" data-id="114e299" data-element_type="widget" data-widget_type="bdt-source-code.default">
				<div class="elementor-widget-container">
			
        <div class="bdt-source-code prism-okaidia">

                            <button class="bdt-copy-button">Copy                </button>
            
            <pre class="language-c">
            <code>//@version=4
strategy(&quot;calc_on_order_fills testing&quot;,  overlay=true, calc_on_order_fills=true, pyramiding=2, max_bars_back=100)

//setup ma
ma = sma(close, 50)

//plotting
plot(ma, linewidth=2)

//Strat
longCondition = (open &gt; ma)
if (longCondition)
    strategy.entry(&quot;MA Long Sig&quot;, strategy.long)

shortCondition = (open &lt; ma)
if (shortCondition)
    strategy.entry(&quot;MA Short Sig&quot;, strategy.short)</code>
        </pre>

        </div>
		</div>
				</div>
				<div class="elementor-element elementor-element-2193fdd elementor-widget elementor-widget-heading" data-id="2193fdd" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h2 class="elementor-heading-title elementor-size-default">Risultati</h2>		</div>
				</div>
				<div class="elementor-element elementor-element-1863a59 elementor-widget elementor-widget-text-editor" data-id="1863a59" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p>Vediamo di seguito i risultati dopo aver eseguito lo script con le impostazioni predefinite <strong>calc_on_order_fills = false, pyramiding = 2</strong>:</p>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-fe16778 elementor-widget elementor-widget-image" data-id="fe16778" data-element_type="widget" data-widget_type="image.default">
				<div class="elementor-widget-container">
								<div class="elementor-image">
												<img width="600" height="340" src="https://datatrading.info/wp-content/uploads/trading-algoritmico-tradingview-pinescript-Recalc-Off.png" class="attachment-large size-large" alt="" loading="lazy" srcset="https://datatrading.info/wp-content/uploads/trading-algoritmico-tradingview-pinescript-Recalc-Off.png 600w, https://datatrading.info/wp-content/uploads/trading-algoritmico-tradingview-pinescript-Recalc-Off-300x170.png 300w, https://datatrading.info/wp-content/uploads/trading-algoritmico-tradingview-pinescript-Recalc-Off-160x91.png 160w" sizes="(max-width: 600px) 100vw, 600px" />														</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-05fc41c elementor-widget elementor-widget-text-editor" data-id="05fc41c" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p><span>La cosa fondamentale da notare su questa immagine è che ogni entrata / uscita si trova su una barra diversa. </span></p><p>Di seguito abbiamo un esempio dello stesso script ma con le impostazioni <strong>calc_on_order_fills = true, pyramiding = 2</strong>:</p>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-c65d9ef elementor-widget elementor-widget-image" data-id="c65d9ef" data-element_type="widget" data-widget_type="image.default">
				<div class="elementor-widget-container">
								<div class="elementor-image">
												<img width="600" height="341" src="https://datatrading.info/wp-content/uploads/trading-algoritmico-tradingview-pinescript-Recalc-On.png" class="attachment-large size-large" alt="trading-algoritmico-tradingview-pinescript-Recalc-On" loading="lazy" srcset="https://datatrading.info/wp-content/uploads/trading-algoritmico-tradingview-pinescript-Recalc-On.png 600w, https://datatrading.info/wp-content/uploads/trading-algoritmico-tradingview-pinescript-Recalc-On-300x171.png 300w, https://datatrading.info/wp-content/uploads/trading-algoritmico-tradingview-pinescript-Recalc-On-160x91.png 160w" sizes="(max-width: 600px) 100vw, 600px" />														</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-b1c5233 elementor-widget elementor-widget-text-editor" data-id="b1c5233" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p>Nel secondo esempio possiamo vedere come 2 ordini di entrata vengono entrambi eseguiti sulla stessa barra. Ciò accade perché l&#8217;intero script viene ricalcolato e le condizioni per l&#8217;ingresso sono ancora valide.</p><p>Penso che vedere le due immagini affiancate renda facile vedere capire l&#8217;effetto di questa impostazione<span style="color: var( --e-global-color-text ); font-size: 1rem;">. Inoltre la seconda immagine evidenzia i pericoli della piramidazione quando si </span><i>ricalcola dopo l&#8217;esecuzione dell&#8217;ordine</i><span style="color: var( --e-global-color-text ); font-size: 1rem;">. Questa impostazione potrebbe essere più utile nei test a termine in cui le condizioni non sono identiche dopo che l&#8217;ordine è stato eseguito o quando si vuole fare trading automatico con broker reali su </span><span style="color: var( --e-global-color-text ); font-size: 1rem;">Tradingview</span><span style="color: var( --e-global-color-text ); font-size: 1rem;">.</span></p><hr /><p>PS. Se sei nuovo su pinescript assicurati di controllare alcuni dei miei post precedenti su Tradingview:</p><ol><li><a href="https://datatrading.info/tradingview-il-primo-script/" target="_blank" rel="noopener noreferrer">Tradingview: primo script</a></li><li><a href="https://datatrading.info/creare-un-indicatore-con-tradingview/" target="_blank" rel="noopener noreferrer">Tradingview: crea un indicatore</a></li><li><a href="https://datatrading.info/tradingview-dati-lookahead-dati-storici-e-dati-realtime/" target="_blank" rel="noopener noreferrer">Tradingview: comprensione dei dati anticipati, storici e in tempo reale</a></li></ol>					</div>
						</div>
				</div>
						</div>
					</div>
		</div>
								</div>
					</div>
		</section>
									</div>
			</div>
					</div>
		<p>L'articolo <a rel="nofollow" href="https://datatrading.info/tradingview-ricalcolo-dopo-esecuzione-di-un-ordine/">Tradingview: Ricalcolo dopo esecuzione di un ordine</a> proviene da <a rel="nofollow" href="https://datatrading.info">Data Trading</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Introduzione a QuantConnect</title>
		<link>https://datatrading.info/iscrizione-e-primi-passi-in-quantconnect/</link>
		
		<dc:creator><![CDATA[Gianluca]]></dc:creator>
		<pubDate>Tue, 19 Feb 2019 16:04:31 +0000</pubDate>
				<category><![CDATA[ToolBox QuantConnect]]></category>
		<category><![CDATA[Toolbox QuantConnect]]></category>
		<guid isPermaLink="false">https://datatrading.info/?p=1685</guid>

					<description><![CDATA[<p>Il contenuto di questo sito è stato inizialmente focalizzato su due piattaforme. Per essere più specifici, tali piattaforme sono Backtrader e Tradingview. Il motivo è semplicemente che queste si sono rivelate per me le soluzioni migliori quando ho iniziato questo viaggio. Come la maggior parte delle persone, prima di decidere di investire il mio tempo &#8230;</p>
<p class="read-more"> <a class="" href="https://datatrading.info/iscrizione-e-primi-passi-in-quantconnect/"> <span class="screen-reader-text">Introduzione a QuantConnect</span> Leggi tutto »</a></p>
<p>L'articolo <a rel="nofollow" href="https://datatrading.info/iscrizione-e-primi-passi-in-quantconnect/">Introduzione a QuantConnect</a> proviene da <a rel="nofollow" href="https://datatrading.info">Data Trading</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="1685" class="elementor elementor-1685">
						<div class="elementor-inner">
				<div class="elementor-section-wrap">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-7b179be elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="7b179be" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
							<div class="elementor-row">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-c4ec9f2" data-id="c4ec9f2" data-element_type="column">
			<div class="elementor-column-wrap elementor-element-populated">
							<div class="elementor-widget-wrap">
						<div class="elementor-element elementor-element-aacbe22 elementor-widget elementor-widget-text-editor" data-id="aacbe22" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				Il contenuto di questo sito è stato inizialmente focalizzato su due piattaforme. Per essere più specifici, tali piattaforme sono Backtrader e Tradingview. Il motivo è semplicemente che queste si sono rivelate per me le soluzioni migliori quando ho iniziato questo viaggio.

Come la maggior parte delle persone, prima di decidere di investire il mio tempo in queste piattaforme, ho dato un&#8217;occhiata a diverse altre opzioni. QuantConnect era solo una delle tante altre piattaforme disponibili. Tuttavia, dopo aver trascorso un po&#8217; di tempo a frugare nel sito, in quel momento ho deciso che QuantConnect non faceva per me.

Di recente, ho capito che era tempo di dare un&#8217;altra occhiata. Dopotutto, la tecnologia si muove a un ritmo rapidissimo ed immaginavo che la piattaforma avrebbe potuto fare molta strada dopo la mia prima visita. Inoltre, dopo aver dedicato molto tempo allo sviluppo nelle altre piattaforme, ora ho una nuova prospettiva e una visione diversa di ciò che è importante per me.

Quindi iniziamo un nuovo viaggio come principianti di questa piattaforma. Vediamo se l&#8217;erba è davvero più verde da quelli parti.					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-a214f3d elementor-widget elementor-widget-heading" data-id="a214f3d" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h2 class="elementor-heading-title elementor-size-default">QuantConnect</h2>		</div>
				</div>
				<div class="elementor-element elementor-element-0f8622d elementor-widget elementor-widget-image" data-id="0f8622d" data-element_type="widget" data-widget_type="image.default">
				<div class="elementor-widget-container">
								<div class="elementor-image">
												<img width="150" height="150" src="https://datatrading.info/wp-content/uploads/2019/08/QuantConnect-Logo.png" class="attachment-large size-large" alt="" loading="lazy" />														</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-19f78ea elementor-widget elementor-widget-text-editor" data-id="19f78ea" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p><em>Per quelli di voi che non ne hanno mai sentito parlare, QuantConnect è una piattaforma online che consente agli utenti di scrivere, collaborare e persino ottenere finanziamenti per algoritmi di trading. Il codice viene generalmente scritto nel browser e backtestato online utilizzando i dati e la potenza di calcolo di QuantConnects.</em></p><p><strong>Link</strong>: <a href="https://www.quantconnect.com/">https://www.quantconnect.com/</a></p>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-1c3e3f1 elementor-widget elementor-widget-heading" data-id="1c3e3f1" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h2 class="elementor-heading-title elementor-size-default">Introduzione</h2>		</div>
				</div>
				<div class="elementor-element elementor-element-5e97279 elementor-widget elementor-widget-text-editor" data-id="5e97279" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				Prima di sviluppare il nostro primo script, fornirò alcune considerazioni iniziali (sia positive che negative) sulle caratteristiche generali della piattaforma. Ciò può aiutare i lettori a valutare rapidamente se continuare o meno questo viaggio.

Innanzitutto, parliamo delle cose buone! Ci sono alcuni aspetti di QuantConnect davvero interessanti e verranno evidenziati man mano lungo questa serie di articoli. Ma quello che è veramente unico la grande quantità di dati storici che sono disponibili per gli utenti. È di facile accesso e quindi non c&#8217;è bisogno di lunghe, fatiche e costose ricerche per reperire e conservare i dati di cui abbiamo bisogno. Chiunque abbia mai provato, saprà bene che è un dispendio di tempo e di denaro!

QuantConnect supporta anche numerosi linguaggi di programmazione (Python, C # e F). Questo è ottimo per una piattaforma online con perimetro semi-murato. Puoi programmare nel linguaggio che conosci, invece di dover imparare un linguaggio di scripting come Pine-Script di Tradingview.					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-34538ae elementor-widget elementor-widget-heading" data-id="34538ae" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h4 class="elementor-heading-title elementor-size-default">Integrazione con il Broker</h4>		</div>
				</div>
				<div class="elementor-element elementor-element-2e2c9e5 elementor-widget elementor-widget-image" data-id="2e2c9e5" data-element_type="widget" data-widget_type="image.default">
				<div class="elementor-widget-container">
								<div class="elementor-image">
												<img width="866" height="474" src="https://datatrading.info/wp-content/uploads/2018/02/QuantConect-brokers-trading-algoritmico.png" class="attachment-large size-large" alt="" loading="lazy" srcset="https://datatrading.info/wp-content/uploads/2018/02/QuantConect-brokers-trading-algoritmico.png 866w, https://datatrading.info/wp-content/uploads/2018/02/QuantConect-brokers-trading-algoritmico-768x420.png 768w" sizes="(max-width: 866px) 100vw, 866px" />														</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-ded18e0 elementor-widget elementor-widget-text-editor" data-id="ded18e0" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				Un altro enorme vantaggio è la stretta integrazione con i maggiori broker per i trader retail. Ovviamente, anche Backtrader supporta l&#8217;integrazione con i broker, ma QuantConnect ha creato partnership ufficiali. Inoltre, forniscono macchine virtuali per facilitare la distribuzione di un algoritmo e garantire un solido tempo di attività. L&#8217;implementazione di un algoritmo live è semplice, basta premere un pulsante nella parte superiore dell&#8217;interfaccia utente e selezionare il proprio broker. Non sono necessarie modifiche al codice.					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-6887e4c elementor-widget elementor-widget-image" data-id="6887e4c" data-element_type="widget" data-widget_type="image.default">
				<div class="elementor-widget-container">
								<div class="elementor-image">
												<img width="326" height="39" src="https://datatrading.info/wp-content/uploads/2018/02/QuantConnect-live-trading-algoritmico.png" class="attachment-large size-large" alt="" loading="lazy" />														</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-2888863 elementor-widget elementor-widget-text-editor" data-id="2888863" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				Se sei interessato al live trading, QuantConnect offre diversi tipi di abbonamenti per i server e gli account (il Backtesting è gratuito). Il prezzo per aprire un server di live trading è abbastanza ragionevole, solo $20 al mese. Questo ti dà pieno accesso all&#8217;infrastruttura e agli strumenti che impiegherebbero molto tempo per essere sviluppati in altri framework come Backtrader. Inoltre, se sei un cliente di Oanda, in realtà ti sovvenzionano il costo del server, rendendolo GRATUITO!					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-56a841a elementor-widget elementor-widget-heading" data-id="56a841a" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h2 class="elementor-heading-title elementor-size-default">Una Visione Oggettiva</h2>		</div>
				</div>
				<div class="elementor-element elementor-element-e00afef elementor-widget elementor-widget-text-editor" data-id="e00afef" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p>Se vogliamo dare un giudizio oggettivo, dobbiamo essere critici e onesti riguardo alle carenze della piattaforma (e ce ne sono alcune).</p><ul><li>Lo sviluppo, il debug e il testing è un processo lungo e lento nel caso si utilizza la piattaforma online. L&#8217;esecuzione del codice, ogni volta, può richiedere fino a 30 secondi per compilare, analizzare ed eseguire il codice. L&#8217;analisi da sola richiede in media 15 secondi e questo deve essere fatto prima di vedere qualsiasi tipo di errore. Quindi, se stai esplorando o eseguendo il debug e provando cose diverse, preparati a lenti progressi. Ad essere onesti, sembra esserci un&#8217;opzione per lo sviluppo locale. Gli utenti possono scaricare il motore &#8220;lean&#8221; ed eseguirlo localmente. Tuttavia, credo che la maggior parte degli utenti occasionali / al dettaglio non seguirà questa strada.</li><li>Documentazione, anche se ce n&#8217;è molta, personalmente ho trovato difficile trovare quello che mi interessava. I programmatori C# hanno un&#8217;eccellente funzione di copilota che fornisce suggerimenti sulla documentazione e fornisce frammenti ci codice delle varie risorse online. Sfortunatamente, il copilota non è disponibile in Python, il mio linguaggio preferito.</li><li>USA &#8211; Centrico: i dati disponibili sono davvero spettacolari ma sono molto focalizzati sui mercati statunitensi. Se si desidera eseguire il backtest delle azioni nel resto del mondo, è comunque necessario procurarsi altri fornitori di dati. Detto questo, i dati del Forex, Crypto e CFD sono disponibili per le persone che non sono interessate alle azioni statunitensi.</li></ul>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-354f765 elementor-widget elementor-widget-heading" data-id="354f765" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h4 class="elementor-heading-title elementor-size-default">Risorse Limitate</h4>		</div>
				</div>
				<div class="elementor-element elementor-element-d95e4e8 elementor-widget elementor-widget-text-editor" data-id="d95e4e8" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p>Poiché si sta usando le risorse di altre persone, ci sono alcune sensibili limitazioni. Ovviamente, QuantConnect non vuole che un utente blocchi accidentalmente il sistema o prosciughi tutte le risorse. Pertanto, sono state previste le seguenti limitazioni:</p><ul><li><em>Limiti di stampa</em>: ogni grafico è limitato a un certo numero di punti. Se si supera il numero massimo di punti, la stampa viene interrotta. Pertanto, se si desidera eseguire un backtest con molti dati, non sarà possibile tracciare completamente tutti i dati. Pertanto, la stampa deve essere eseguita durante periodi di test più brevi per verificare che l&#8217;algoritmo funzioni come previsto.</li><li><em>Limite di logging giornaliero</em>. Ogni utente può creare solo x Kb nei file di log. Ciò significa che devi essere un po&#8217; attento ai dati che decidi di stampare nei log e chiederti se sono veramente utili.</li><li>Pacchetti: poiché siamo in esecuzione in un sistema con un perimetro ben limitato, solo una manciata di pacchetti sono ufficialmente disponibili per l&#8217;importazione. Fortunatamente, i pacchetti che possiamo importare sono quelli più utilizzati e che probabilmente sono esenziali,  come Panda, Numpy, Sci-kit learn, statsmodels ecc.</li></ul>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-6a24eb9 elementor-widget elementor-widget-heading" data-id="6a24eb9" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h2 class="elementor-heading-title elementor-size-default">Iniziamo</h2>		</div>
				</div>
				<div class="elementor-element elementor-element-992ab65 elementor-widget elementor-widget-text-editor" data-id="992ab65" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p>Il prossimo post relativo a QuantConnect riguarderà un&#8217;introduzione di base per iniziare a utilizzare Python su QuantConnect. Segue un formato simile (ove possibile) agli articoli introduttivi delle altre piattaforme descritte su <a href="http://datatrading.info/toolbox/">DataTrading.info</a></p>					</div>
						</div>
				</div>
						</div>
					</div>
		</div>
								</div>
					</div>
		</section>
									</div>
			</div>
					</div>
		<p>L'articolo <a rel="nofollow" href="https://datatrading.info/iscrizione-e-primi-passi-in-quantconnect/">Introduzione a QuantConnect</a> proviene da <a rel="nofollow" href="https://datatrading.info">Data Trading</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Creare un Indicatore con Tradingview</title>
		<link>https://datatrading.info/creare-un-indicatore-con-tradingview/</link>
		
		<dc:creator><![CDATA[Gianluca]]></dc:creator>
		<pubDate>Thu, 14 Feb 2019 08:52:19 +0000</pubDate>
				<category><![CDATA[ToolBox Tradingview]]></category>
		<category><![CDATA[Toolbox Tradingview]]></category>
		<guid isPermaLink="false">https://datatrading.info/?p=1366</guid>

					<description><![CDATA[<p>Questo articolo fa anche parte della serie introduttiva su Tradingview. In questo tutorial, seguiremo passaggi simili a quelli descritti nell&#8217;articolo Tradingview: il primo Script, con la differenza che in questo caso si vuole creare un indicatore invece che una strategia. Se non sai come aprire l&#8217;editor di pine-script, ti suggerisco di leggere l&#8217;articolo menzionato sopra. &#8230;</p>
<p class="read-more"> <a class="" href="https://datatrading.info/creare-un-indicatore-con-tradingview/"> <span class="screen-reader-text">Creare un Indicatore con Tradingview</span> Leggi tutto »</a></p>
<p>L'articolo <a rel="nofollow" href="https://datatrading.info/creare-un-indicatore-con-tradingview/">Creare un Indicatore con Tradingview</a> proviene da <a rel="nofollow" href="https://datatrading.info">Data Trading</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="1366" class="elementor elementor-1366">
						<div class="elementor-inner">
				<div class="elementor-section-wrap">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-72e9f51 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="72e9f51" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
							<div class="elementor-row">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-eb49031" data-id="eb49031" data-element_type="column">
			<div class="elementor-column-wrap elementor-element-populated">
							<div class="elementor-widget-wrap">
						<div class="elementor-element elementor-element-03efbdc elementor-widget elementor-widget-text-editor" data-id="03efbdc" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p>Questo articolo fa anche parte della serie introduttiva su Tradingview. In questo tutorial, seguiremo passaggi simili a quelli descritti nell&#8217;articolo <a href="http://datatrading.info/tradingview-il-primo-script/">Tradingview: il primo Script</a>, con la differenza che in questo caso si vuole creare un indicatore invece che una strategia.</p><p>Se non sai come aprire l&#8217;editor di pine-script, ti suggerisco di leggere l&#8217;articolo menzionato sopra. Ti guiderà attraverso l&#8217;apertura di un grafico e l&#8217;accesso all&#8217;editor.</p>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-ccc2219 elementor-widget elementor-widget-heading" data-id="ccc2219" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h2 class="elementor-heading-title elementor-size-default">L'indicatore</h2>		</div>
				</div>
				<div class="elementor-element elementor-element-f86c7cf elementor-widget elementor-widget-text-editor" data-id="f86c7cf" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p>Prima di iniziare a sporcarci le mani, è opportuno descrivere la logica dell&#8217;indicatore che si vuole creare. In questo articolo si descrive come creare un indicatore RSI con un doppio intervallo di tempo. L&#8217;indicatore traccia i valori RSI relativi a 2 timeframe. La prima linea tracciata corrisponde al timeframe corrente del grafico, mentre la seconda è relativa ad un timeframe selezionato dall&#8217;utente. L&#8217;idea base consiste nel ritenere probabile un&#8217;inversione del trend (o almeno un ritorno verso la media) di uno strumento quando il prezzo è ipercomprato / ipervenduto contemporaneamente su due diversi timeframe. Questo indicatore è adatto in condizioni di mercato laterale.</p><p>Gli argomenti di base trattati in questo tutorial sono:</p><ul><li>Comprensione della funzione di studio</li><li>Aggiunta degli ingressi dell&#8217;indicatore</li><li>Importazione dei dati relativi ad un diverso timeframe</li><li>Chiamata ad una funzione RSI</li><li>Mostrare graficamente le linee orizzontali e le linee RSI</li></ul><p>Ok, vediamo in dettaglio l&#8217;implementazione di questo indicatore</p>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-e014a3a elementor-widget elementor-widget-heading" data-id="e014a3a" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h2 class="elementor-heading-title elementor-size-default">Il Codice</h2>		</div>
				</div>
				<div class="elementor-element elementor-element-6e818cf elementor-widget elementor-widget-text-editor" data-id="6e818cf" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				Di seguito puoi trovare il codice completo. A seguire si descrive in dettaglio la logica di ogni sezione di questo codice.					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-7d6ddd8 elementor-widget elementor-widget-bdt-source-code" data-id="7d6ddd8" data-element_type="widget" data-widget_type="bdt-source-code.default">
				<div class="elementor-widget-container">
			
        <div class="bdt-source-code prism-okaidia">

                            <button class="bdt-copy-button">Copy                </button>
            
            <pre class="language-py">
            <code>//@version=3
study(&quot;Dual Strength RSI&quot;, &quot;DS-RSI&quot;)
 
// Inputs
otf = input(defval=&quot;D&quot;, title=&quot;Second Momentum Timeframe&quot;, type=resolution)
otf_period = input(defval=14, title=&quot;Look Back Period (2nd Timeframe)&quot;, type=integer)
ctf_period = input(defval=14, title=&quot;Look Back Period (Chart Timeframe)&quot;, type=integer)
ob = input(defval=70, title=&quot;Overbought Area&quot;, type=integer)
os = input(defval=30, title=&quot;Oversold Area&quot;, type=integer)
 
//Get the data
otf_rsi = security(tickerid, otf, rsi(close, otf_period))
 
//Calculate RSI Values
ctf_rsi = rsi(close, ctf_period)
 
//Plot
hline(ob, title=&#039;Overbought Line&#039;, color=black, linestyle=dashed, linewidth=1)
hline(os, title=&#039;Oversold Line&#039;, color=black, linestyle=dashed, linewidth=1)
plot(otf_rsi, title=&#039;OTF RSI&#039;, color=blue, style=line, linewidth=3)
plot(ctf_rsi, title=&#039;CTF RSI&#039;, color=green, style=line, linewidth=3)</code>
        </pre>

        </div>
		</div>
				</div>
				<div class="elementor-element elementor-element-a261980 elementor-widget elementor-widget-heading" data-id="a261980" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h4 class="elementor-heading-title elementor-size-default">Spiegazione del Codice</h4>		</div>
				</div>
				<div class="elementor-element elementor-element-ef39b82 elementor-widget elementor-widget-text-editor" data-id="ef39b82" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				Iniziato dall&#8217;intestazione del codice con la funzione <code style="color: #e83e8c;">study()</code>.					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-95c0547 elementor-widget elementor-widget-text-editor" data-id="95c0547" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
									</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-188cb5e elementor-widget elementor-widget-bdt-source-code" data-id="188cb5e" data-element_type="widget" data-widget_type="bdt-source-code.default">
				<div class="elementor-widget-container">
			
        <div class="bdt-source-code prism-okaidia">

                            <button class="bdt-copy-button">Copy                </button>
            
            <pre class="language-py">
            <code>study(&quot;Dual Strength RSI&quot;, &quot;DS-RSI&quot;)</code>
        </pre>

        </div>
		</div>
				</div>
				<div class="elementor-element elementor-element-58f3630 elementor-widget elementor-widget-text-editor" data-id="58f3630" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p>La funzione <em>study</em> deve essere inclusa in ogni script. Tradingview classifica questo tipo di funzione come una &#8220;<a href="http://www.tradingview.com/wiki/Functions_vs_Annotation_Functions">funzione di annotazione</a>&#8220;. Come suggerisce il nome, queste funzioni annotano le informazioni che appaiono sul grafico. Ad esempio, assegnando un titolo all&#8217;indicatore presente nel grafico. Nell&#8217;esempio precedente si assegna all&#8217;indicatore un titolo completo e una notazione breve.</p><p> </p><p><strong>Inputs</strong></p>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-40f4227 elementor-widget elementor-widget-bdt-source-code" data-id="40f4227" data-element_type="widget" data-widget_type="bdt-source-code.default">
				<div class="elementor-widget-container">
			
        <div class="bdt-source-code prism-okaidia">

                            <button class="bdt-copy-button">Copy                </button>
            
            <pre class="language-py">
            <code>otf = input(defval=&quot;D&quot;, title=&quot;Second Momentum Timeframe&quot;, type=resolution)
otf_period = input(defval=14, title=&quot;Look Back Period (2nd Timeframe)&quot;, type=integer)
ctf_period = input(defval=14, title=&quot;Look Back Period (Chart Timeframe)&quot;, type=integer)
ob = input(defval=80, title=&quot;Overbought Area&quot;, type=integer)
os = input(defval=20, title=&quot;Oversold Area&quot;, type=integer)</code>
        </pre>

        </div>
		</div>
				</div>
				<div class="elementor-element elementor-element-bd5d672 elementor-widget elementor-widget-text-editor" data-id="bd5d672" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p>A seguire si ha la sezione degli input. Gli input forniscono i parametri dell&#8217;indicatore che possono essere modificati dopo aver aggiunto l&#8217;indicatore al grafico. Offrono agli altri utenti la possibilità di modificare le impostazioni dell&#8217;indicatore nel caso non condividino le impostazioni di default. Inoltre, gli utenti possono salvare la propria configurazione per qualsiasi indicatore. Non c&#8217;è bisogno di codificare queste logiche perchè sono integrate nelle funzionalità stardand della piattaforma.</p><ul><li><strong>defval</strong> = valore predefinito per il parametro</li><li><strong>title</strong> = Il testo che appare nella casella di input</li><li><strong>type</strong> = il tipo di valore che deve essere inserito. Si noti che un parametro è di tipo &#8220;<em><strong>resolution</strong></em>&#8220;. Questa è una variabile speciale che fornisce l&#8217;elenco di tutti i timeframe supportati.</li></ul><p>Di seguito si mostra un esempio della rappresentazione grafica di questi input.</p>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-6d4a490 elementor-widget elementor-widget-image" data-id="6d4a490" data-element_type="widget" data-widget_type="image.default">
				<div class="elementor-widget-container">
								<div class="elementor-image">
												<img width="600" height="514" src="https://datatrading.info/wp-content/uploads/2018/02/Input-parametri-tradingview-trading-algoritmico.jpg" class="attachment-large size-large" alt="" loading="lazy" />														</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-92400d1 elementor-widget elementor-widget-text-editor" data-id="92400d1" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p><strong> </strong></p><p><strong>Import di altri dati</strong></p>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-bf27af6 elementor-widget elementor-widget-bdt-source-code" data-id="bf27af6" data-element_type="widget" data-widget_type="bdt-source-code.default">
				<div class="elementor-widget-container">
			
        <div class="bdt-source-code prism-okaidia">

                            <button class="bdt-copy-button">Copy                </button>
            
            <pre class="language-py">
            <code>//Get the data
otf_rsi = security(tickerid, otf, rsi(close, otf_period))</code>
        </pre>

        </div>
		</div>
				</div>
				<div class="elementor-element elementor-element-1929ee7 elementor-widget elementor-widget-text-editor" data-id="1929ee7" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				Vediamo ora l&#8217;importazione dei dati. Questa linea di codice usa una funzione chiamata <code style="color: #e83e8c;">security()</code> per importare i dati all&#8217;interno dello script. I dati importati potrebbero provenire da un diverso timeframe dello stesso strumento, dallo stesso timeframe ma di uno strumento diverso oppure da un timeframe e uno strumento completamente diversi da quelli rappresentati nel grafico principale.
<ul>
 	<li><strong>tickerid</strong> = È un&#8217;altra variabile speciale che si riferisce allo strumento nel grafico principale. Questo ci consente di ottenere facilmente un altro timeframe dello stesso strumento. Ancora più importante, dato che non si specifica il nome di uno strumento (ad esempio LON: VOD), questo indicatore può essere applicato a qualsiasi strumento senza bisogno di modificare il codice.</li>
 	<li><strong>otf</strong> = È la variabile restituita dalla funzione di input che abbiamo aggiunto sopra.</li>
 	<li><strong>rsi (close, otf_period)</strong> = Restituisce una serie RSI per il timeframe selezionato. In questo caso l&#8217;RSI è calcolato  a partire dai valori <strong><em>close</em></strong> di ogni barra di quel timeframe.</li>
</ul>
<strong>Plotting</strong>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-b47dccb elementor-widget elementor-widget-bdt-source-code" data-id="b47dccb" data-element_type="widget" data-widget_type="bdt-source-code.default">
				<div class="elementor-widget-container">
			
        <div class="bdt-source-code prism-okaidia">

                            <button class="bdt-copy-button">Copy                </button>
            
            <pre class="language-py">
            <code>//Plot
hline(ob, title=&#039;Overbought Line&#039;, color=black, linestyle=dashed, linewidth=1)
hline(os, title=&#039;Oversold Line&#039;, color=black, linestyle=dashed, linewidth=1)
plot(otf_rsi, title=&#039;OTF RSI&#039;, color=blue, style=line, linewidth=3)
plot(ctf_rsi, title=&#039;CTF RSI&#039;, color=green, style=line, linewidth=3)</code>
        </pre>

        </div>
		</div>
				</div>
				<div class="elementor-element elementor-element-48d5058 elementor-widget elementor-widget-text-editor" data-id="48d5058" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				Infine si tracciano tutte le linee sul grafico. La funzione <code style="color: #e83e8c;">hline()</code> traccia le linee orizzontali. La funzione <code style="color: #e83e8c;">plot()</code> traccia i valori della serie RSI. 
Per concludere penso che gli argomenti delle keyword siano abbastanza autoesplicativi.					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-e4cdd6b elementor-widget elementor-widget-heading" data-id="e4cdd6b" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h4 class="elementor-heading-title elementor-size-default">Il Risultato</h4>		</div>
				</div>
				<div class="elementor-element elementor-element-c57056d elementor-widget elementor-widget-text-editor" data-id="c57056d" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p>Per vedere il risultato finale del nostro indicatore è sufficiente:</p><ol><li>Aprire Tradingview</li><li>Scrivere il codice nell&#8217;editor di pine-script.</li><li>Premere il pulsante &#8220;Aggiungi al grafico&#8221;</li></ol>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-16eec3a elementor-widget elementor-widget-image" data-id="16eec3a" data-element_type="widget" data-widget_type="image.default">
				<div class="elementor-widget-container">
								<div class="elementor-image">
												<img width="1587" height="799" src="https://datatrading.info/wp-content/uploads/2018/02/RSI-indicatore-tradingview-trading-algoritmico.png" class="attachment-large size-large" alt="" loading="lazy" srcset="https://datatrading.info/wp-content/uploads/2018/02/RSI-indicatore-tradingview-trading-algoritmico.png 1587w, https://datatrading.info/wp-content/uploads/2018/02/RSI-indicatore-tradingview-trading-algoritmico-768x387.png 768w" sizes="(max-width: 1587px) 100vw, 1587px" />														</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-6b8518f elementor-widget elementor-widget-text-editor" data-id="6b8518f" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				Questo è tutto quello che c&#8217;è da fare per creare un indicatore con pine-script di tradingview.

Con questo codice di partenza prova a giocare con il setup dei dati importando diversi strumenti, prova un mix di indicatori, gioca con le funzioni di disegno e vedi se riesci a trovare qualche combinazione interessante.					</div>
						</div>
				</div>
						</div>
					</div>
		</div>
								</div>
					</div>
		</section>
									</div>
			</div>
					</div>
		<p>L'articolo <a rel="nofollow" href="https://datatrading.info/creare-un-indicatore-con-tradingview/">Creare un Indicatore con Tradingview</a> proviene da <a rel="nofollow" href="https://datatrading.info">Data Trading</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Tradingview: lookahead dei dati realtime e dei dati storici</title>
		<link>https://datatrading.info/tradingview-dati-lookahead-dati-storici-e-dati-realtime/</link>
		
		<dc:creator><![CDATA[Gianluca]]></dc:creator>
		<pubDate>Sat, 09 Feb 2019 10:00:31 +0000</pubDate>
				<category><![CDATA[ToolBox Tradingview]]></category>
		<category><![CDATA[Toolbox Tradingview]]></category>
		<guid isPermaLink="false">https://datatrading.info/?p=1352</guid>

					<description><![CDATA[<p>Per quanto la documentazione di pine-script sia ben fatta, ci sono ancora parti non spiegate sufficientemente bene, oppure è rivolta ad un target di pubblico con competenze molto avanzate. Ho quindi deciso di scrivere questo articolo dopo aver speso un po&#8217; di tempo a studiare le differenze tra i dati &#8220;in tempo reale&#8221; e i &#8230;</p>
<p class="read-more"> <a class="" href="https://datatrading.info/tradingview-dati-lookahead-dati-storici-e-dati-realtime/"> <span class="screen-reader-text">Tradingview: lookahead dei dati realtime e dei dati storici</span> Leggi tutto »</a></p>
<p>L'articolo <a rel="nofollow" href="https://datatrading.info/tradingview-dati-lookahead-dati-storici-e-dati-realtime/">Tradingview: lookahead dei dati realtime e dei dati storici</a> proviene da <a rel="nofollow" href="https://datatrading.info">Data Trading</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="1352" class="elementor elementor-1352">
						<div class="elementor-inner">
				<div class="elementor-section-wrap">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-cbacc20 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="cbacc20" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
							<div class="elementor-row">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-d46a6ff" data-id="d46a6ff" data-element_type="column">
			<div class="elementor-column-wrap elementor-element-populated">
							<div class="elementor-widget-wrap">
						<div class="elementor-element elementor-element-24b8a87 elementor-widget elementor-widget-text-editor" data-id="24b8a87" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p>Per quanto la documentazione di pine-script sia ben fatta, ci sono ancora parti non spiegate sufficientemente bene, oppure è rivolta ad un target di pubblico con competenze molto avanzate. Ho quindi deciso di scrivere questo articolo dopo aver speso un po&#8217; di tempo a studiare le differenze tra i dati &#8220;in tempo reale&#8221; e i dati storici e come l&#8217;utilizzo di un tipo o dell&#8217;altro possa modificare i calcoli prodotti da un indicatore. Questo è particolarmente vero quando si inizia ad utilizzare la keyword lookahead. Ne parleremo più avanti &#8230;</p><p>Nota: se hai appena iniziato ad utilizzare pine-script, ho scritto un&#8217;introduzione nell&#8217;articolo <a href="http://datatrading.info/tradingview-il-primo-script/">&#8220;Trading View: il primo Script&#8221;</a></p>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-f083ccc elementor-widget elementor-widget-heading" data-id="f083ccc" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h2 class="elementor-heading-title elementor-size-default">Dati Storici vs Dati Real-time</h2>		</div>
				</div>
				<div class="elementor-element elementor-element-ce0a711 elementor-widget elementor-widget-text-editor" data-id="ce0a711" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p>I dati &#8220;real-time&#8221; di Tradingview non devono essere confusi con i dati in tempo reale forniti dalle borse e dagli exchange. In pine-script i dati in tempo reale sono tutti i dati acquisiti durante la creazione di una candela (anche se i dati stessi sono in ritardo). Al contrario, i dati storici si riferiscono a qualsiasi candela chiusa prima di aggiungere qualsiasi indicatore sul grafico. Sembra logico vero? E&#8217; necessario però fare attenzione a un paio di cose:</p><ul><li>I calcoli effettuati su dati in tempo reale quasi sempre hanno risultati diversi rispetto a quelli effettuati sui dati storici. Questo può sembrare ovvio, ma negli esempi seguenti si evidenzia come questo può provocare effetti indesiderati.</li><li>I dati in tempo reale non diventano dati storici una volta completata la candela. In altre parole, tali dati non sono elaborati nello stesso modo in cui sono elaborati i dati storici quando si aggiunge l&#8217;indicatore per la prima volta. Anche in questo caso, i seguenti esempi evidenziano queste criticità.</li></ul><p>Andiamo avanti con un esempio pratico e creiamo un indicatore.</p>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-bc814ba elementor-widget elementor-widget-heading" data-id="bc814ba" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h2 class="elementor-heading-title elementor-size-default">L'indicatore</h2>		</div>
				</div>
				<div class="elementor-element elementor-element-04cb72f elementor-widget elementor-widget-text-editor" data-id="04cb72f" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				L&#8217;indicatore che si vuol utilizzare è un semplice indicatore che sovrappone i valori giornalieri di High e Low su un grafico infragiornaliero. Questo potrebbe essere utile quando si cercano breakout sopra / sotto il massimo / minimo del giorno precedente.					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-b7a80b6 elementor-widget elementor-widget-heading" data-id="b7a80b6" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h4 class="elementor-heading-title elementor-size-default">Esempio 1 - Livelli Base</h4>		</div>
				</div>
				<div class="elementor-element elementor-element-0041a37 elementor-widget elementor-widget-text-editor" data-id="0041a37" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p>Il seguente codice è l&#8217;esempio più semplice di questo articolo. L&#8217;indicatore raccoglie semplicemente valori alti e bassi per lo stesso strumento usando un timeframe giornaliero. Quindi traccia questi valori nel timeframe corrente.</p>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-6606b38 elementor-widget elementor-widget-bdt-source-code" data-id="6606b38" data-element_type="widget" data-widget_type="bdt-source-code.default">
				<div class="elementor-widget-container">
			
        <div class="bdt-source-code prism-okaidia">

                            <button class="bdt-copy-button">Copy                </button>
            
            <pre class="language-c">
            <code>//@version=3
study(&quot;Barmerge Tests&quot;, overlay=true)
 
daily_high = security(tickerid, &quot;D&quot;, high)
daily_low = security(tickerid, &quot;D&quot;, low)
 
plot(daily_high, style=cross, color=green)
plot(daily_low, style=cross, color=red)</code>
        </pre>

        </div>
		</div>
				</div>
				<div class="elementor-element elementor-element-b27b9ed elementor-widget elementor-widget-text-editor" data-id="b27b9ed" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p>Come al solito, puoi copiare ed incollare il codice precedente direttamente nell&#8217;editor di <a href="http://tradingview.go2cloud.org/SHpB">pine-script di Tradingview</a> ed aggiungire l&#8217;indicatore al tuo grafico.</p>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-686a65f elementor-widget elementor-widget-heading" data-id="686a65f" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h4 class="elementor-heading-title elementor-size-default">Risultati dell'esempio 1</h4>		</div>
				</div>
				<div class="elementor-element elementor-element-20e1714 elementor-widget elementor-widget-image" data-id="20e1714" data-element_type="widget" data-widget_type="image.default">
				<div class="elementor-widget-container">
								<div class="elementor-image">
												<img width="799" height="335" src="https://datatrading.info/wp-content/uploads/2018/02/tradingview-lookahead-dati-storici.png" class="attachment-large size-large" alt="" loading="lazy" srcset="https://datatrading.info/wp-content/uploads/2018/02/tradingview-lookahead-dati-storici.png 799w, https://datatrading.info/wp-content/uploads/2018/02/tradingview-lookahead-dati-storici-768x322.png 768w" sizes="(max-width: 799px) 100vw, 799px" />														</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-94a48bc elementor-widget elementor-widget-text-editor" data-id="94a48bc" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				Nell&#8217;immagine precedente si può notare come i dati storici sono calcolati e tracciati come previsto. Si ha una bella linea retta dall&#8217;inizio alla fine di ogni giorno. Tuttavia, guarda cosa succede quando arrivano i dati in tempo reale. Le barre si spostano verso l&#8217;alto nel bel mezzo della giornata!

Dopo aver esaminato più da vicino le linee generate dopo l&#8217;aggiunta dell&#8217;indicatore (dati in tempo reale), si può notare come le linee hanno iniziato a far riferimento ai valori High / Low del giorno corrente.					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-f10f936 elementor-widget elementor-widget-heading" data-id="f10f936" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h2 class="elementor-heading-title elementor-size-default">Lookahead</h2>		</div>
				</div>
				<div class="elementor-element elementor-element-d4b7ce7 elementor-widget elementor-widget-text-editor" data-id="d4b7ce7" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				Il <strong>Lookahead</strong> permette di includere i dati futuri nei calcoli di un indicatore. Se si dichiara <code style="color: #e83e8c;">"lookahead_on"</code>, l&#8217;indicatore guarderà avanti per trovare alti e bassi per il resto della giornata. Li userà quindi per tracciare ogni barra infragiornaliera quel giorno, indipendentemente dal fatto che siamo prima o dopo il massimo o il minimo di quel giorno. L&#8217;esempio seguente mostra questo in modo più dettagliato.					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-d36460e elementor-widget elementor-widget-heading" data-id="d36460e" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h4 class="elementor-heading-title elementor-size-default">Example 2 – lookahead attivo</h4>		</div>
				</div>
				<div class="elementor-element elementor-element-1252ce8 elementor-widget elementor-widget-text-editor" data-id="1252ce8" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p>Nell&#8217;esempio seguente si utilizza attivamente la funzionalità di <strong>lookahead</strong>. Se non si fornisce un argomento per la kyword &#8220;lookaheda&#8221;, il valore di default è OFF (barmerge.lookahead_off).</p>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-7f9a390 elementor-widget elementor-widget-bdt-source-code" data-id="7f9a390" data-element_type="widget" data-widget_type="bdt-source-code.default">
				<div class="elementor-widget-container">
			
        <div class="bdt-source-code prism-okaidia">

                            <button class="bdt-copy-button">Copy                </button>
            
            <pre class="language-c">
            <code>//@version=3
study(&quot;Barmerge Tests&quot;, overlay=true)
 
daily_high = security(tickerid, &quot;D&quot;, high, lookahead=barmerge.lookahead_on)
daily_low = security(tickerid, &quot;D&quot;, low, lookahead=barmerge.lookahead_on)
 
plot(daily_high, style=cross, color=green)
plot(daily_low, style=cross, color=red)</code>
        </pre>

        </div>
		</div>
				</div>
				<div class="elementor-element elementor-element-de2b019 elementor-widget elementor-widget-heading" data-id="de2b019" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h4 class="elementor-heading-title elementor-size-default"><br>Risultati dell'esempio 2</h4>		</div>
				</div>
				<div class="elementor-element elementor-element-bd4e436 elementor-widget elementor-widget-image" data-id="bd4e436" data-element_type="widget" data-widget_type="image.default">
				<div class="elementor-widget-container">
								<div class="elementor-image">
												<img width="1076" height="453" src="https://datatrading.info/wp-content/uploads/2018/02/tradingview-lookahead-dati-realtime.png" class="attachment-large size-large" alt="" loading="lazy" srcset="https://datatrading.info/wp-content/uploads/2018/02/tradingview-lookahead-dati-realtime.png 1076w, https://datatrading.info/wp-content/uploads/2018/02/tradingview-lookahead-dati-realtime-768x323.png 768w" sizes="(max-width: 1076px) 100vw, 1076px" />														</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-d827a35 elementor-widget elementor-widget-text-editor" data-id="d827a35" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p>Nella figura precedente si mostra l&#8217;indicatore appena stato aggiunto al grafico. Per i dati storici, il massimo e il minimo della giornata sono tracciati prima che questi avvengano effettivamente durante la giornata!</p><p><em>Non utilizzare mai questo tipo di indicatore per il backtest</em>. Ad esempio, è possibile overfittare i risultati aprendo una posizione short all&#8217;inizio della giornata e chiudendola prima della fine della stessa giornata. Si avrebbero ottime prestazioni ma non sarebbero applicabili nel mondo reale.</p><p>Per i dati in tempo reale, il calcolo restituisce valori diversi all&#8217;interno della stessa giornata, quando il prezzo si sposta oltre il massimo o il minimo corrente. Questo è ovvio perché non possiamo conoscere in anticipo il valore delle candele che si devono ancora formare e che potrebbero avere high più alti e low più bassi.</p><p>Di seguito è riportato il grafico dell&#8217;indicatore che utilizza i dati in tempo reale dove il prezzo si sposta oltre i dati storici High e Low già noti.</p>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-aaa5c0f elementor-widget elementor-widget-image" data-id="aaa5c0f" data-element_type="widget" data-widget_type="image.default">
				<div class="elementor-widget-container">
								<div class="elementor-image">
												<img width="800" height="430" src="https://datatrading.info/wp-content/uploads/2018/02/tradingview-lookahead-dati-realtime-storici.png" class="attachment-large size-large" alt="" loading="lazy" srcset="https://datatrading.info/wp-content/uploads/2018/02/tradingview-lookahead-dati-realtime-storici.png 800w, https://datatrading.info/wp-content/uploads/2018/02/tradingview-lookahead-dati-realtime-storici-768x413.png 768w" sizes="(max-width: 800px) 100vw, 800px" />														</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-96c5567 elementor-widget elementor-widget-heading" data-id="96c5567" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h4 class="elementor-heading-title elementor-size-default">Esempio 3 - Lookahead on e l'index.</h4>		</div>
				</div>
				<div class="elementor-element elementor-element-40f1fe0 elementor-widget elementor-widget-text-editor" data-id="40f1fe0" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				In questo caso si può vedere che le linee High e Low rappresentano i valori relativi ai giorni precedenti. Inoltre, i dati in tempo reale forniscono lo stesso valore.					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-ba5cdb1 elementor-widget elementor-widget-bdt-source-code" data-id="ba5cdb1" data-element_type="widget" data-widget_type="bdt-source-code.default">
				<div class="elementor-widget-container">
			
        <div class="bdt-source-code prism-okaidia">

                            <button class="bdt-copy-button">Copy                </button>
            
            <pre class="language-c">
            <code>//@version=3
study(&quot;Barmerge Tests&quot;, overlay=true)
 
daily_high = security(tickerid, &quot;D&quot;, high[1], lookahead=barmerge.lookahead_on)
daily_low = security(tickerid, &quot;D&quot;, low[1], lookahead=barmerge.lookahead_on)
 
plot(daily_high, style=cross, color=green)
plot(daily_low, style=cross, color=red)</code>
        </pre>

        </div>
		</div>
				</div>
				<div class="elementor-element elementor-element-548e144 elementor-widget elementor-widget-heading" data-id="548e144" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h4 class="elementor-heading-title elementor-size-default"><br>Risultati dell'esempio 3</h4>		</div>
				</div>
				<div class="elementor-element elementor-element-f3c1c05 elementor-widget elementor-widget-image" data-id="f3c1c05" data-element_type="widget" data-widget_type="image.default">
				<div class="elementor-widget-container">
								<div class="elementor-image">
												<img width="1075" height="451" src="https://datatrading.info/wp-content/uploads/2018/02/tradingview-lookahead-dati-realtime-indicizzati.png" class="attachment-large size-large" alt="" loading="lazy" srcset="https://datatrading.info/wp-content/uploads/2018/02/tradingview-lookahead-dati-realtime-indicizzati.png 1075w, https://datatrading.info/wp-content/uploads/2018/02/tradingview-lookahead-dati-realtime-indicizzati-768x322.png 768w" sizes="(max-width: 1075px) 100vw, 1075px" />														</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-3e92fe4 elementor-widget elementor-widget-text-editor" data-id="3e92fe4" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				Qui possiamo vedere che le linee High e Low rappresentanto i valori relativi ai giorni precedenti. Inoltre, i dati in tempo reale forniscono lo stesso valore.					</div>
						</div>
				</div>
						</div>
					</div>
		</div>
								</div>
					</div>
		</section>
									</div>
			</div>
					</div>
		<p>L'articolo <a rel="nofollow" href="https://datatrading.info/tradingview-dati-lookahead-dati-storici-e-dati-realtime/">Tradingview: lookahead dei dati realtime e dei dati storici</a> proviene da <a rel="nofollow" href="https://datatrading.info">Data Trading</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Indicatore di Trendline per BackTrader</title>
		<link>https://datatrading.info/indicatore-di-trendline-per-backtrader/</link>
		
		<dc:creator><![CDATA[Gianluca]]></dc:creator>
		<pubDate>Sat, 02 Feb 2019 09:41:34 +0000</pubDate>
				<category><![CDATA[ToolBox BackTrader]]></category>
		<category><![CDATA[Toolbox Backtrader]]></category>
		<guid isPermaLink="false">https://datatrading.info/?p=1294</guid>

					<description><![CDATA[<p>Questo è un frammento di codice per un indicatore di Trendline. Come suggerisce il nome, calcola il valore del prezzo in diversi punti di una trendline e, di conseguenza, genera segnali di acquisto e vendita. In alcuni casi mi piace poter adottare un approccio semi-automatico al trading algoritmico. Si potrebbe individuare una bella trendline su &#8230;</p>
<p class="read-more"> <a class="" href="https://datatrading.info/indicatore-di-trendline-per-backtrader/"> <span class="screen-reader-text">Indicatore di Trendline per BackTrader</span> Leggi tutto »</a></p>
<p>L'articolo <a rel="nofollow" href="https://datatrading.info/indicatore-di-trendline-per-backtrader/">Indicatore di Trendline per BackTrader</a> proviene da <a rel="nofollow" href="https://datatrading.info">Data Trading</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="1294" class="elementor elementor-1294">
						<div class="elementor-inner">
				<div class="elementor-section-wrap">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-dd2789e elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="dd2789e" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
							<div class="elementor-row">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-1cb2853" data-id="1cb2853" data-element_type="column">
			<div class="elementor-column-wrap elementor-element-populated">
							<div class="elementor-widget-wrap">
						<div class="elementor-element elementor-element-b2fb84e elementor-widget elementor-widget-text-editor" data-id="b2fb84e" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				Questo è un frammento di codice per un indicatore di Trendline. Come suggerisce il nome, calcola il valore del prezzo in diversi punti di una trendline e, di conseguenza, genera segnali di acquisto e vendita. In alcuni casi mi piace poter adottare un approccio semi-automatico al trading algoritmico. Si potrebbe individuare una bella trendline su Tradingview ma si vuole eseguire operazioni in un ambiente di forward testing, utilizzando Backtrader, quando il prezzo raggiunge la trendline. In quanto tale, considero questo un indicatore a breve termine che può essere utilizzato fino a quando la trendline non viene rotta.

L&#8217;indicatore di trendline descritto in questo articolo  è destinato a essere utilizzato nel framework di Backtrader, ma i calcoli utilizzati per calcolare la trendline possono essere facilmente trasferiti su altri framework.					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-865ee56 elementor-widget elementor-widget-heading" data-id="865ee56" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h2 class="elementor-heading-title elementor-size-default">Background Matematico</h2>		</div>
				</div>
				<div class="elementor-element elementor-element-e6164f3 elementor-widget elementor-widget-text-editor" data-id="e6164f3" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p>Se come me, non sei un mago della matematica, potrebbe essere necessario un po&#8217; di teoria per capire le equazioni contenute nel codice. E&#8217; necessario quindi introdurre quelle che nel mondo della matematica sono conosciute come &#8220;<strong>equazioni lineari</strong>&#8220;, al fine di poter sviluppare questo indicatore.</p><p>Un tutorial ben scritto e molto utile, anche se in inglese, è il seguente:<br /><a href="https://www.mathplanet.com/education/algebra-1/formulating-linear-equations/writing-linear-equations-using-the-slope-intercept-form">mathplanet.com/education/algebra-1/formulating-linear-equations/writing-linear-equations-using-the-slope-intercept-form</a></p><p>Il concetto principale è che per poter calcolare il prezzo della trendline in qualsiasi momento, è necessario calcolare la velocità con cui cambia la pendenza tra due punti temporali. Questi punti temporali sono i due prezzi inseriti come input per l&#8217;indicatore. Come identificare questi due punti dipende da te. Come accennato in precedenza, identifico e traccio in modo discrezionale la trendline su Tradingview e quindi prendo nota del punto iniziale e del punto finale da utilizzare con questo indicatore.</p><p>L&#8217;equazione a cui dobbiamo arrivare è:</p><p style="text-align: center;">\(<br />\begin{eqnarray}<br />y = mx + b<br />\end{eqnarray}<br />\)</p><p>Dove:</p><p>y = prezzo</p><p>m = pendenza</p><p>x = data / ora</p><p>b = intersezione con l&#8217;asse y</p><p>A questo punto, una cosa che ho trovato difficile da spiegare è come la maggior parte dei tutorial presume che tu possa vedere visivamente l&#8217;intersezione con l&#8217;asse y, cioè il valore di y quando attraversa l&#8217;asse y per x=0. In questo modo:</p>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-32a4847 elementor-widget elementor-widget-image" data-id="32a4847" data-element_type="widget" data-widget_type="image.default">
				<div class="elementor-widget-container">
								<div class="elementor-image">
												<img width="287" height="290" src="https://datatrading.info/wp-content/uploads/2018/02/Nonproportional_relationship_graph.jpg" class="attachment-medium size-medium" alt="" loading="lazy" />														</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-ad8fb06 elementor-widget elementor-widget-text-editor" data-id="ad8fb06" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				Come sappiamo, i grafici dei prezzi sono leggermente diversi perchè difficilmente si può tornare indietro nel tempo (dove si potrebbe attraversare l&#8217;asse y). Non possiamo vedere dove è l&#8217;intersezione dell&#8217;asse y ma è possibile calcolarla! Per fare questo è necessario capovolgere un po&#8217; l&#8217;equazione.
<p style="text-align: center;">\(
\begin{eqnarray}
y = mx + b
\end{eqnarray}
\)
<br>diventa<br>\(
\begin{eqnarray}
b = y – m*x
\end{eqnarray}
\)
</p>
Dopo aver risolto l&#8217;equazione, si può  utilizzare i valori di x e y del punto iniziale e finale della trendline che hai indiviuato. Vedrai come l&#8217;ho implementato nel codice seguente.					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-c40efa4 elementor-widget elementor-widget-heading" data-id="c40efa4" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h2 class="elementor-heading-title elementor-size-default">Le Regole dell'Indicatore</h2>		</div>
				</div>
				<div class="elementor-element elementor-element-fa90872 elementor-widget elementor-widget-text-editor" data-id="fa90872" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				L&#8217;indicatore della trendline genera un segnale di acquisto se il prezzo attraversa la trendline verso l&#8217;alto, mentre genera un segnale di vendita se il prezzo la attraversa dal basso. Poiché la trendline funge da supporto o resistenza, sarà sempre inferiore al prezzo quando si cercano segnali di acquisto mentre sarà superiore al prezzo quando si cercano segnali di vendita.					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-700bc31 elementor-widget elementor-widget-heading" data-id="700bc31" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h2 class="elementor-heading-title elementor-size-default">Il Codice</h2>		</div>
				</div>
				<div class="elementor-element elementor-element-1e4bf6c elementor-widget elementor-widget-bdt-source-code" data-id="1e4bf6c" data-element_type="widget" data-widget_type="bdt-source-code.default">
				<div class="elementor-widget-container">
			
        <div class="bdt-source-code prism-okaidia">

                            <button class="bdt-copy-button">Copy                </button>
            
            <pre class="language-py">
            <code>class TrendLine(bt.Indicator):
 
    lines = (&#039;signal&#039;,&#039;trend&#039;)
    params = (
        (&#039;x1&#039;, None),
        (&#039;y1&#039;, None),
        (&#039;x2&#039;, None),
        (&#039;y2&#039;, None)
    )
 
    def __init__(self):
        self.p.x1 = datetime.datetime.strptime(self.p.x1, &quot;%Y-%m-%d %H:%M:%S&quot;)
        self.p.x2 = datetime.datetime.strptime(self.p.x2, &quot;%Y-%m-%d %H:%M:%S&quot;)
        x1_time_stamp = time.mktime(self.p.x1.timetuple())
        x2_time_stamp = time.mktime(self.p.x2.timetuple())
        self.m = self.get_slope(x1_time_stamp,x2_time_stamp,self.p.y1,self.p.y2)
        self.B = self.get_y_intercept(self.m, x1_time_stamp, self.p.y1)
        self.plotlines.trend._plotskip = True
 
    def next(self):
        date = self.data0.datetime.datetime()
        date_timestamp = time.mktime(date.timetuple())
        Y = self.get_y(date_timestamp)
        self.lines.trend[0] = Y
 
        #Check if price has crossed up / down into it.
        if self.data0.high[-1] &lt; Y and self.data0.high[0] &gt; Y:
            self.lines.signal[0] = -1
            return
 
        #Check for cross downs (Into support)
        elif self.data0.low[-1] &gt; Y and self.data0.low[0] &lt; Y:
            self.lines.signal[0] = 1
            return
 
        else:
            self.lines.signal[0] = 0
 
    def get_slope(self, x1,x2,y1,y2):
        m = (y2-y1)/(x2-x1)
        return m
 
    def get_y_intercept(self, m, x1, y1):
        b=y1-m*x1
        return b
 
    def get_y(self,ts):
        Y = self.m * ts + self.B
        return Y</code>
        </pre>

        </div>
		</div>
				</div>
				<div class="elementor-element elementor-element-2fe7e61 elementor-widget elementor-widget-heading" data-id="2fe7e61" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h4 class="elementor-heading-title elementor-size-default"><br>Spiegazione del codice</h4>		</div>
				</div>
				<div class="elementor-element elementor-element-e96aa05 elementor-widget elementor-widget-text-editor" data-id="e96aa05" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				Si generano due <em>lines</em> per questo indicatore. Una line è la trendline e l&#8217;altra line è il segnale. Da notare che la trendline non viene tracciata nel grafico perché in backtrader non è possibile tracciare una line sul grafico principale e un&#8217;altra sul grafico secondario. Si deve scegliere l&#8217;uno o l&#8217;altro. Tecnicamente si potrebbe tracciare entrambi sul grafico secondario, ma risulterebbe un po&#8217; strano poiché la trendline può essere qualsiasi numero (dato che il valore dipende dal prezzo dello strumento) mentre il segnale oscilla solamente tra -1 e 1. Una soluzione alternativa è presentata nella sezione dei risultati.

Un&#8217;altra cosa da notare sono le date, che devono essere convertite in un timestamp in modo che i calcoli possano essere fatti su un numero e non su un oggetto data.

Infine, ci si potrebbe domandare perché si sta costruendo la trendline e richiamando <code style="color: #e83e8c;">get_y()</code> nel metodo <code style="color: #e83e8c;">next()</code> invece che nel metodo <code style="color: #e83e8c;">__init__()</code>? Questo perché backtrader genera un <code style="color: #e83e8c;">IndexError</code> se si prova ad ottenere le informazioni sulla data all&#8217;interno di __init__(). Se qualcuno sa come risolvere il problema, lasciatemi un commento! Probabilmente ho trascurato qualcosa all&#8217;interno della documentazione.					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-15f5479 elementor-widget elementor-widget-heading" data-id="15f5479" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h4 class="elementor-heading-title elementor-size-default">I metodi chiave</h4>		</div>
				</div>
				<div class="elementor-element elementor-element-14b4530 elementor-widget elementor-widget-text-editor" data-id="14b4530" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				Se si desidera implementare questo codice in un altro framewoek, i tre metodi fondamentali da implementare sono i seguenti:					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-4f226ae elementor-widget elementor-widget-text-editor" data-id="4f226ae" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
									</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-272854b elementor-widget elementor-widget-bdt-source-code" data-id="272854b" data-element_type="widget" data-widget_type="bdt-source-code.default">
				<div class="elementor-widget-container">
			
        <div class="bdt-source-code prism-okaidia">

                            <button class="bdt-copy-button">Copy                </button>
            
            <pre class="language-py">
            <code>    def get_slope(self, x1,x2,y1,y2):
        m = (y2-y1)/(x2-x1)
        return m
 
    def get_y_intercept(self, m, x1, y1):
        b=y1-m*x1
        return b
 
    def get_y(self,ts):
        Y = self.m * ts + self.B
        return Y</code>
        </pre>

        </div>
		</div>
				</div>
				<div class="elementor-element elementor-element-be7a269 elementor-widget elementor-widget-text-editor" data-id="be7a269" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p>Come in precedenza, è necessario utilizzare i <em>timestamp</em> per i parametri <strong>x</strong> e richiamare le funzioni nel seguente ordine:</p><ol><li>get_slope()</li><li>get_y_intercept(), perché ha bisogno del valore di m, risultato di get_slope()</li><li>get_y, per ottenere il prezzo finale per qualsiasi data e ora.</li></ol>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-083d360 elementor-widget elementor-widget-heading" data-id="083d360" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h2 class="elementor-heading-title elementor-size-default">Risultati</h2>		</div>
				</div>
				<div class="elementor-element elementor-element-18193b5 elementor-widget elementor-widget-text-editor" data-id="18193b5" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p>Come accennato in precedenza, se si esegue questo codice così com&#8217;è, l&#8217;indicatore non traccia automaticamente nessuna trendline sul grafico di output. Poiché l&#8217;indicatore è progettato per produrre segnali di acquisto e vendita, la priorità è data alla stampa della <em>line</em> del segnale.</p><p>Come soluzione alternativa, per creare una certa verifica visiva del corretto funzionamento dell&#8217;indicatore, è possibile inizializzare un secondo indicatore all&#8217;interno della strategia che traccia una media mobile semplice della trendline, con un periodo pari a 1.</p>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-ea2b314 elementor-widget elementor-widget-bdt-source-code" data-id="ea2b314" data-element_type="widget" data-widget_type="bdt-source-code.default">
				<div class="elementor-widget-container">
			
        <div class="bdt-source-code prism-okaidia">

                            <button class="bdt-copy-button">Copy                </button>
            
            <pre class="language-py">
            <code>self.sma = bt.indicators.MovingAverageSimple(self.ind1.lines.trend, 
                                             period = 1,
                                             plotmaster = self.data0
                                            )</code>
        </pre>

        </div>
		</div>
				</div>
				<div class="elementor-element elementor-element-10a6056 elementor-widget elementor-widget-text-editor" data-id="10a6056" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				Da notare che, nel codice precedenete, è necessario inserire la riga all&#8217;interno del metodo __init__() della strategia, supponendo di aver già inizializzato l&#8217;indicatore con il nome ind1 (self.ind1.lines.trend).					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-5360c4a elementor-widget elementor-widget-image" data-id="5360c4a" data-element_type="widget" data-widget_type="image.default">
				<div class="elementor-widget-container">
								<div class="elementor-image">
												<img width="800" height="698" src="https://datatrading.info/wp-content/uploads/2019/08/trendline-indicator-with-sma-backtrader-trading-algoritmico.jpg" class="attachment-large size-large" alt="" loading="lazy" srcset="https://datatrading.info/wp-content/uploads/2019/08/trendline-indicator-with-sma-backtrader-trading-algoritmico.jpg 800w, https://datatrading.info/wp-content/uploads/2019/08/trendline-indicator-with-sma-backtrader-trading-algoritmico-768x670.jpg 768w" sizes="(max-width: 800px) 100vw, 800px" />														</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-41324e7 elementor-widget elementor-widget-text-editor" data-id="41324e7" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				Come si può vedere, si ha una trendline che attraversa il grafico e i segnali vengono generati secondo le regole implementate nel codice, come rappresentato nel grafico secondario.					</div>
						</div>
				</div>
						</div>
					</div>
		</div>
								</div>
					</div>
		</section>
									</div>
			</div>
					</div>
		<p>L'articolo <a rel="nofollow" href="https://datatrading.info/indicatore-di-trendline-per-backtrader/">Indicatore di Trendline per BackTrader</a> proviene da <a rel="nofollow" href="https://datatrading.info">Data Trading</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Gestire il Position Sizing con BackTrader &#8211; Parte I</title>
		<link>https://datatrading.info/gestire-il-position-sizing-con-backtrader-parte-i/</link>
		
		<dc:creator><![CDATA[Gianluca]]></dc:creator>
		<pubDate>Mon, 28 Jan 2019 09:53:37 +0000</pubDate>
				<category><![CDATA[ToolBox BackTrader]]></category>
		<category><![CDATA[Toolbox Backtrader]]></category>
		<guid isPermaLink="false">https://datatrading.info/?p=1284</guid>

					<description><![CDATA[<p>Con questo articolo si introduce un argomento fondamentale nel mondo del trading automatico: il dimensionamento delle posizioni. Inizialmente, pensavo di scrivere un solo articolo, ma mentre mi immergevo sempre più in profondità nell&#8217;argomento mi sono reso conto che ci sarebbero stati troppi contenuti per un solo articolo di ragionevole durata. In quanto tale, questo primo &#8230;</p>
<p class="read-more"> <a class="" href="https://datatrading.info/gestire-il-position-sizing-con-backtrader-parte-i/"> <span class="screen-reader-text">Gestire il Position Sizing con BackTrader &#8211; Parte I</span> Leggi tutto »</a></p>
<p>L'articolo <a rel="nofollow" href="https://datatrading.info/gestire-il-position-sizing-con-backtrader-parte-i/">Gestire il Position Sizing con BackTrader &#8211; Parte I</a> proviene da <a rel="nofollow" href="https://datatrading.info">Data Trading</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="1284" class="elementor elementor-1284">
						<div class="elementor-inner">
				<div class="elementor-section-wrap">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-0f0df30 elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="0f0df30" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
							<div class="elementor-row">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-006f388" data-id="006f388" data-element_type="column">
			<div class="elementor-column-wrap elementor-element-populated">
							<div class="elementor-widget-wrap">
						<div class="elementor-element elementor-element-fed7ffe elementor-widget elementor-widget-text-editor" data-id="fed7ffe" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p>Con questo articolo si introduce un argomento fondamentale nel mondo del trading automatico: il dimensionamento delle posizioni. Inizialmente, pensavo di scrivere un solo articolo, ma mentre mi immergevo sempre più in profondità nell&#8217;argomento mi sono reso conto che ci sarebbero stati troppi contenuti per un solo articolo di ragionevole durata. In quanto tale, questo primo articolo si concentra sui concetti fondamenti per lo sviluppo dei sizer e fornisce un paio di semplici esempi. Il secondo articolo approfondisce alcuni aspetti, ed i particolare a <strong>comminfo</strong>. Dato che comminfo è una classe,si ha numerosi metodi che possono essere utilizzati per far sì che i tuoi algoritmi di dimensionamento tengano conto delle commissioni, degli interessi e delle posizioni aperte.</p>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-158b675 elementor-widget elementor-widget-heading" data-id="158b675" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h2 class="elementor-heading-title elementor-size-default">La classe Sizer</h2>		</div>
				</div>
				<div class="elementor-element elementor-element-b0d8f85 elementor-widget elementor-widget-text-editor" data-id="b0d8f85" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				I Sizer sono classi che possono essere caricate in cerebro e utilizzate per decidere quante azioni, quote, contratti, ecc, acquistare o vendere ogni volta che viene chiamato <code style="color: #e83e8c;">self.buy()</code> o <code style="color: #e83e8c;">self.sell()</code>. I sizers sono utilizzati per un calcolo della posizione solo quando non viene fornita alcuna dimensione. In altre parole, se il tuo script contiene una chiamata di acquisto come <em>self.buy(size=100)</em>, il Sizer non verrà chiamato. Tuttavia, se si chiama solo tramite <em>self.buy()</em>, cerebro chiederà al sizer la dimensione da acquistare.					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-140c9be elementor-widget elementor-widget-heading" data-id="140c9be" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h4 class="elementor-heading-title elementor-size-default">Perchè abbiammo bisogno dei Sizer?</h4>		</div>
				</div>
				<div class="elementor-element elementor-element-acaf68a elementor-widget elementor-widget-text-editor" data-id="acaf68a" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p>Alcuni trader possono preferire di dichiarare esplicitamente la dimensione, invece di implementare un qualsiasi tipo di logica di dimensionamento all&#8217;interno del codice della loro strategia. Se preferisci questo approccio non c&#8217;è niente di male, dopotutto ci sono molti modi per risolvere lo stesso problema! Tuttavia, dal mio punto di vista, usare i Sizer permette alcuni vantaggi. Se ti piace avere un codice ben strutturato e suddiviso, allora i Sizer fanno al tuo caso. Inoltre i Sizer consentono di apportare alcune modifiche, piccole o anche più consistenti, alla logica di una strategia senza dover toccare il codice della classe Strategia. La documentazione di Backtrader ha un buon esempio su come un sizer viene utilizzato per trasformare una strategia &#8220;long/short&#8221; in una strategia &#8220;solo long&#8221;, semplicemente usando un diverso sizer. Facendo un ulteriore passo avanti, è facile immaginare di poter implementare una libreria di Sizer che ti consenta di implementare la stessa strategia in mercati diversi con schemi commissionali e condizioni commerciali diverse senza dover modificare il codice di strategia principale.</p><p>Documentazione: <a style="background-color: #ffffff;" href="https://www.backtrader.com/docu/sizers/sizers.html#practical-sizer-applicability" target="_blank" rel="noopener">backtrader.com/docu/sizers/sizers.html#practical-sizer-applicability</a></p>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-eea2fb3 elementor-widget elementor-widget-heading" data-id="eea2fb3" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h2 class="elementor-heading-title elementor-size-default">La Struttura di un Sizer</h2>		</div>
				</div>
				<div class="elementor-element elementor-element-58bfe16 elementor-widget elementor-widget-text-editor" data-id="58bfe16" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				Un sizer è una sottoclasse di <code style="color: #e83e8c;">backtrader.Sizer</code>. La sottoclasse ci consente di costruire un oggetto utilizzando la classe principale come base di partenza. L&#8217;oggetto eredita quindi tutte le caratteristiche e le funzionalità della classe principale senza dover copiare e incollare il codice nella nuova classe. E&#8217; quindi possibile modificare solo le parti del codice, riscrivendo un metodo (una funzione di classe), un attributo (una variabile di classe) o aggiungendo qualcosa di nuovo. Tutte le parti rimaste intatte continueranno a funzionare nello stesso modo in cui erano state scritte nella classe genitore. Nel codice qui sotto è presente backtrader.Sizer scritto come bt.Sizer poiché generalmente utilizzo questo istruzione <code style="color: #e83e8c;">import backtrader as bt</code>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-8611d78 elementor-widget elementor-widget-bdt-source-code" data-id="8611d78" data-element_type="widget" data-widget_type="bdt-source-code.default">
				<div class="elementor-widget-container">
			
        <div class="bdt-source-code prism-okaidia">

                            <button class="bdt-copy-button">Copy                </button>
            
            <pre class="language-py">
            <code>class exampleSizer(bt.Sizer):
    params = ((&#039;size&#039;,1),)
    def _getsizing(self, comminfo, cash, data, isbuy):
        return self.p.size</code>
        </pre>

        </div>
		</div>
				</div>
				<div class="elementor-element elementor-element-842f3ba elementor-widget elementor-widget-text-editor" data-id="842f3ba" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				Il codice precedente contiene un esempio di ridimensionamento nella sua forma più semplice. Questo ci permetterà di suddividere ed analizzare le componenti chiave di un sizer.					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-05fc31e elementor-widget elementor-widget-heading" data-id="05fc31e" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h4 class="elementor-heading-title elementor-size-default">La tupla "params"</h4>		</div>
				</div>
				<div class="elementor-element elementor-element-68e5848 elementor-widget elementor-widget-text-editor" data-id="68e5848" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				I Sizer, proprio come le strategie e gli indicatori possono contenere una tupla di parametri. Avere un set di parametri può offrire una certa flessibilità durante il caricamento del sizer in cerebro e fornire i dati al sizer, che altrimenti non sarebbero disponibili.					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-0d7ab6c elementor-widget elementor-widget-heading" data-id="0d7ab6c" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h4 class="elementor-heading-title elementor-size-default">_getsizing()</h4>		</div>
				</div>
				<div class="elementor-element elementor-element-553df28 elementor-widget elementor-widget-text-editor" data-id="553df28" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				Successivamente abbiamo il metodo <code style="color: #e83e8c;">_getsizing ()</code>. Questo metodo viene chiamato ogni volta che una strategia effettua una chiamata <em>self.buy()</em> o <em>self.sell()</em> senza indicare la dimensione dell&#8217;ordine. Il metodo <em>_getsizing()</em> prevede una serie di parametri, provenienti dal framework Backtrader. Questi sono:
<ul>
 	<li><strong>comminfo</strong>: fornisce l&#8217;accesso a vari metodi che permettono di conoscere i dati del iano commissionale previsto dal broker. Ciò consente di valutare tutte le commissioni relative al singolo trade prima di decidere la dimensione. Nella seconda parte di questo tutorial si descrive comminfo in modo più dettagliato.</li>
 	<li><strong>cash</strong>: fornisce la quantità di denaro disponibile sul conto.</li>
 	<li><strong>data</strong>: fornisce l&#8217;accesso al feed dei dati. Ad esempio, tramite questo parametro possiamo accedere all&#8217;ultimo prezzo di chiusura.</li>
 	<li><strong>isbuy</strong>: è un valore booleano (Vero / Falso) che identifica se l&#8217;ordine è un ordine di acquisto. Se è falso, allora l&#8217;ordine è un ordine di vendita.</li>
</ul>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-a96b1f6 elementor-widget elementor-widget-heading" data-id="a96b1f6" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h4 class="elementor-heading-title elementor-size-default">Strategy e Broker</h4>		</div>
				</div>
				<div class="elementor-element elementor-element-06ddbfe elementor-widget elementor-widget-text-editor" data-id="06ddbfe" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				Ci sono inoltre le due classi accessibili, ma non visibili nel codice precedente, <code style="color: #e83e8c;">self.strategy</code> e <code style="color: #e83e8c;">self.broker</code>. Con questi due oggetti si ha praticamente accesso a tutto il necessario per creare complessi algoritmi di dimensionamento. Da sottolineare però, nel caso si eseguono calcoli basati su attributi di strategia, è nessario assicurarsi che siano attributi / variabili standard nel framework. In altre parole, attributi disponibili per tutte le strategie (anziché attributi personalizzati, aggiunti al codice per proprio conto). In caso contrario si rinuncia alla portabilità del sizer poiché questo funzionerà solo con la strategia dove  codificato quello specifico attributo.					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-12e600f elementor-widget elementor-widget-heading" data-id="12e600f" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h4 class="elementor-heading-title elementor-size-default">Non dimenticarti di restituire qualcosa</h4>		</div>
				</div>
				<div class="elementor-element elementor-element-c4874ba elementor-widget elementor-widget-text-editor" data-id="c4874ba" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				Infine, è necessario ricordarsi di restituire un valore alla fine del calcolo. Se lo si dimentica, la strategia non effettuerà alcun ordine.					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-dafe883 elementor-widget elementor-widget-heading" data-id="dafe883" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h2 class="elementor-heading-title elementor-size-default">Il Codice</h2>		</div>
				</div>
				<div class="elementor-element elementor-element-7eb998c elementor-widget elementor-widget-text-editor" data-id="7eb998c" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p>Il seguente codice contiene tre esempi di Sizer. Il primo prevede dimensioni fisse, analogo a quanto mostrato nel blocco precedente. Il secondo è un esempio di sizer che stampa tutti i parametri del metodo _getsizing () ad eccezione di comminfo (che vedremo più dettagliatamente in seguito). L&#8217;esempio finale fornisce l&#8217;implementazione di un pratico ridimensionamento per limitare le dimensioni di un trade a una percentuale della liquidità totale del conto. Questo è un comune algoritmo di <strong>position sizing</strong> che molte strategie utilizzano per limitare il rischio.</p>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-fea74c7 elementor-widget elementor-widget-bdt-source-code" data-id="fea74c7" data-element_type="widget" data-widget_type="bdt-source-code.default">
				<div class="elementor-widget-container">
			
        <div class="bdt-source-code prism-okaidia">

                            <button class="bdt-copy-button">Copy                </button>
            
            <pre class="language-py">
            <code>import backtrader as bt
from datetime import datetime
import math


class exampleSizer(bt.Sizer):
    params = ((&#039;size&#039;,1),)
    def _getsizing(self, comminfo, cash, data, isbuy):
        return self.p.size

class printSizingParams(bt.Sizer):
    &#039;&#039;&#039;
    Prints the sizing parameters and values returned from class methods.
    &#039;&#039;&#039;
    def _getsizing(self, comminfo, cash, data, isbuy):
        #Strategy Method example
        pos = self.strategy.getposition(data)
        #Broker Methods example
        acc_value = self.broker.getvalue()

        #Print results
        print(&#039;----------- SIZING INFO START -----------&#039;)
        print(&#039;--- Strategy method example&#039;)
        print(pos)
        print(&#039;--- Broker method example&#039;)
        print(&#039;Account Value: {}&#039;.format(acc_value))
        print(&#039;--- Param Values&#039;)
        print(&#039;Cash: {}&#039;.format(cash))
        print(&#039;isbuy??: {}&#039;.format(isbuy))
        print(&#039;data[0]: {}&#039;.format(data[0]))
        print(&#039;------------ SIZING INFO END------------&#039;)

        return 0

class maxRiskSizer(bt.Sizer):
    &#039;&#039;&#039;
    Returns the number of shares rounded down that can be purchased for the
    max rish tolerance
    &#039;&#039;&#039;
    params = ((&#039;risk&#039;, 0.03),)

    def __init__(self):
        if self.p.risk &gt; 1 or self.p.risk &lt; 0:
            raise ValueError(&#039;The risk parameter is a percentage which must be&#039;
                &#039;entered as a float. e.g. 0.5&#039;)

    def _getsizing(self, comminfo, cash, data, isbuy):
        if isbuy == True:
            size = math.floor((cash * self.p.risk) / data[0])
        else:
            size = math.floor((cash * self.p.risk) / data[0]) * -1
        return size



class firstStrategy(bt.Strategy):

    def __init__(self):
        self.rsi = bt.indicators.RSI_SMA(self.data.close, period=21)

    def next(self):
        if not self.position:
            if self.rsi &lt; 30: self.buy() else: if self.rsi &gt; 70:
                self.close()

    def notify_trade(self, trade):
        if trade.justopened:
            print(&#039;----TRADE OPENED----&#039;)
            print(&#039;Size: {}&#039;.format(trade.size))
        elif trade.isclosed:
            print(&#039;----TRADE CLOSED----&#039;)
            print(&#039;Profit, Gross {}, Net {}&#039;.format(
                                                round(trade.pnl,2),
                                                round(trade.pnlcomm,2)))
        else:
            return


#Variable for our starting cash
startcash = 10000

#Create an instance of cerebro
cerebro = bt.Cerebro()

#Add our strategy
cerebro.addstrategy(firstStrategy)

#Get Apple data from Yahoo Finance.
data = bt.feeds.YahooFinanceData(
    dataname=&#039;AAPL&#039;,
    fromdate = datetime(2016,1,1),
    todate = datetime(2017,1,1),
    buffered= True
    )

#Add the data to Cerebro
cerebro.adddata(data)

# Set our desired cash start
cerebro.broker.setcash(startcash)

#add the sizer
cerebro.addsizer(printSizingParams)

# Run over everything
cerebro.run()

#Get final portfolio Value
portvalue = cerebro.broker.getvalue()
pnl = portvalue - startcash

#Print out the final result
print(&#039;----SUMMARY----&#039;)
print(&#039;Final Portfolio Value: ${}&#039;.format(portvalue))
print(&#039;P/L: ${}&#039;.format(pnl))

#Finally plot the end results
cerebro.plot(style=&#039;candlestick&#039;)</code>
        </pre>

        </div>
		</div>
				</div>
				<div class="elementor-element elementor-element-0658111 elementor-widget elementor-widget-heading" data-id="0658111" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h4 class="elementor-heading-title elementor-size-default">Spiegazione del codice</h4>		</div>
				</div>
				<div class="elementor-element elementor-element-cecb919 elementor-widget elementor-widget-text-editor" data-id="cecb919" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				Prima di tutto, dato che abbiamo più esempi, vale la pena notare come passare da uno all&#8217;altro. Per cambiare il sizer in uso, è sufficiente modificare questa riga:					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-9fb4a73 elementor-widget elementor-widget-bdt-source-code" data-id="9fb4a73" data-element_type="widget" data-widget_type="bdt-source-code.default">
				<div class="elementor-widget-container">
			
        <div class="bdt-source-code prism-okaidia">

                            <button class="bdt-copy-button">Copy                </button>
            
            <pre class="language-py">
            <code>#add the sizer
cerebro.addsizer(exampleSizer, size=50)</code>
        </pre>

        </div>
		</div>
				</div>
				<div class="elementor-element elementor-element-790164b elementor-widget elementor-widget-text-editor" data-id="790164b" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				In questa:					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-e0a26b4 elementor-widget elementor-widget-bdt-source-code" data-id="e0a26b4" data-element_type="widget" data-widget_type="bdt-source-code.default">
				<div class="elementor-widget-container">
			
        <div class="bdt-source-code prism-okaidia">

                            <button class="bdt-copy-button">Copy                </button>
            
            <pre class="language-py">
            <code>#add the sizer
cerebro.addsizer(printSizingParams)</code>
        </pre>

        </div>
		</div>
				</div>
				<div class="elementor-element elementor-element-dd0b51d elementor-widget elementor-widget-text-editor" data-id="dd0b51d" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				O in questa:					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-35bd360 elementor-widget elementor-widget-bdt-source-code" data-id="35bd360" data-element_type="widget" data-widget_type="bdt-source-code.default">
				<div class="elementor-widget-container">
			
        <div class="bdt-source-code prism-okaidia">

                            <button class="bdt-copy-button">Copy                </button>
            
            <pre class="language-py">
            <code>#add the sizer
cerebro.addsizer(maxRiskSizer, risk=0.2)</code>
        </pre>

        </div>
		</div>
				</div>
				<div class="elementor-element elementor-element-fffa74e elementor-widget elementor-widget-text-editor" data-id="fffa74e" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p><strong>Import math</strong></p><p>In questo codice ho incluso un modulo Python aggiuntivo. Il modulo math fornisce <code style="color: #e83e8c;">math.floor()</code> che semplifica l&#8217;arrotondamento per difetto al numero più vicino. Con un algoritmo di rischio massimo, non si può mai arrotondare per eccesso perché può portarci potenzialmente oltre al nostro limite di rischio. L&#8217;arrotondamento per diffetto non potrà mai farlo. La documentazione ufficiale di Python per il modulo <code style="color: #e83e8c;">math</code> è disponibile al seguente link: <strong><a href="http://docs.python.org/3/library/math.html">docs.python.org/3/library/math.html</a></strong></p><p><strong>exampleSizer ()</strong><br />Il sizer di esempio è stato incluso solo per discutere l&#8217;anatomia di un sizer. Tuttavia, fornisce anche un esempio di un sizer che utilizza una dimensione fissa. Una versione quasi identica appare nella documentazione ufficiale di Backtrader: <a href="https://www.backtrader.com/docu/sizers/sizers.html#sizer-development">www.backtrader.com/docu/sizers/sizers.html#sizer-development</a></p><p><strong>printSizingParams ()</strong><br />Per verificare il codice ho incluso un semplice sizer che stampa il contenuto dei parametri del calibratore. Di solito vedere esattamente cosa viene restituito mi aiuta a capire esattamente cosa sta facendo il parametro e come posso usarlo. È doppiamente utile quando si ha problemi a leggere la documentazione. L&#8217;esecuzione del codice fornisce il seguente output:</p>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-d68b858 elementor-widget elementor-widget-image" data-id="d68b858" data-element_type="widget" data-widget_type="image.default">
				<div class="elementor-widget-container">
								<div class="elementor-image">
												<img width="672" height="636" src="https://datatrading.info/wp-content/uploads/2018/01/print-sizers-backtrader-itrading-algoritmico.jpg" class="attachment-large size-large" alt="" loading="lazy" />														</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-42c76c5 elementor-widget elementor-widget-text-editor" data-id="42c76c5" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p>Il primo parametro stampato dal codice è un esempio dei dati che possono essere consultati tramite la classe di strategia, usando <code style="color: #e83e8c;">self.strategy.getposition()</code>. Si può subito notare che &#8220;<code style="color: #e83e8c;">pos</code>&#8221; è un oggetto <em>posizione</em> anziché un semplice valore come &#8220;<code style="color: #e83e8c;">cash</code>&#8220;. Allo stesso modo la variabile <code style="color: #e83e8c;">account value</code> fornisce un esempio dei dati a cui è possibile accedere facilmente tramite <code style="color: #e83e8c;">self.broker()</code>. Nota nel caso live trading, è indispensabile assicurarsi quali metodi live del broker prescelto sono supportari nella documentazione di Backtrader. Ho dovuto implementare alcune soluzioni alternative perchè alcuni metodi non erano disponibili in Backtrader durante il trading live con Oanda.</p><p><strong>maxRiskSizer</strong><br /><code style="color: #e83e8c;">maxRiskSizer()</code> calcola semplicemente la posizione della dimensione massima che puoi assumere senza superare una determinata percentuale del capitale disponibile nel tuo account. La percentuale viene impostata tramite il parametro &#8220;<code style="color: #e83e8c;">risk</code>&#8221; presente nella tupla dei parametri. La percentuale viene immessa come float tra 0 e 1 e il valore default è pari a 3%, ma può essere impostato su qualsiasi valore quando viene caricato in cerebro. Per quelli come voi che non sono maghi matematici, il simbolo <strong>*-1</strong> nella seguente riga di codice modifica il valore della dimensione da positiva a negativa. Si ha bisogno di una dimensione negativa nel caso di un ordine di vendita.</p>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-1d6a9f9 elementor-widget elementor-widget-bdt-source-code" data-id="1d6a9f9" data-element_type="widget" data-widget_type="bdt-source-code.default">
				<div class="elementor-widget-container">
			
        <div class="bdt-source-code prism-okaidia">

                            <button class="bdt-copy-button">Copy                </button>
            
            <pre class="language-py">
            <code>size = math.floor ((cash * self.p.risk) / data [0]) * -1</code>
        </pre>

        </div>
		</div>
				</div>
				<div class="elementor-element elementor-element-b553d3c elementor-widget elementor-widget-text-editor" data-id="b553d3c" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p><strong>​Attenzione a maxRiskSizer buy.sell()</strong><br />Se hai l&#8217;abitudine di chiudere una posizione con una dimensione fissa utilizzando buy.sell(), devi essere consapevole che l&#8217;uso di maxRiskSizer può far sì che le posizioni non vengano chiuse e causi entrate indesiderate. Questo perché i livelli di liquidità sono dinamiche, cioè si modificano quando i trade sono aperti e chiusi, quindi la precentuale x% di apertura è ora l&#8217;x% di un totale diverso. In altre parole, il valore dello strumento sta cambiando in modo tale che x% comporti una diversa quantità di azioni / contratti acquistati. La semplice soluzione è chiudere le posizioni con la fuzione <code style="color: #e83e8c;">​self.close()</code>. Questo calcolerà la dimensione corretta necessaria per chiudere completamente una posizione.</p>					</div>
						</div>
				</div>
						</div>
					</div>
		</div>
								</div>
					</div>
		</section>
									</div>
			</div>
					</div>
		<p>L'articolo <a rel="nofollow" href="https://datatrading.info/gestire-il-position-sizing-con-backtrader-parte-i/">Gestire il Position Sizing con BackTrader &#8211; Parte I</a> proviene da <a rel="nofollow" href="https://datatrading.info">Data Trading</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Ottimizzare le Strategie con BackTrader</title>
		<link>https://datatrading.info/ottimizzare-le-strategie-con-backtrader/</link>
		
		<dc:creator><![CDATA[Gianluca]]></dc:creator>
		<pubDate>Tue, 22 Jan 2019 11:25:00 +0000</pubDate>
				<category><![CDATA[ToolBox BackTrader]]></category>
		<category><![CDATA[Toolbox Backtrader]]></category>
		<guid isPermaLink="false">https://datatrading.info/?p=1243</guid>

					<description><![CDATA[<p>Dopo aver creato una strategia di base ed averla analizzata, il prossimo passo consiste nell&#8217;ottimizzare questa strategia. L&#8217;ottimizzazione è un processo di verifica che assegna valori diversi per ogni parametro della strategia al fine di individuare quale set di valori (o configurazione) fornisce i migliori risultati, in termini di profitto. Da notare che non tutti &#8230;</p>
<p class="read-more"> <a class="" href="https://datatrading.info/ottimizzare-le-strategie-con-backtrader/"> <span class="screen-reader-text">Ottimizzare le Strategie con BackTrader</span> Leggi tutto »</a></p>
<p>L'articolo <a rel="nofollow" href="https://datatrading.info/ottimizzare-le-strategie-con-backtrader/">Ottimizzare le Strategie con BackTrader</a> proviene da <a rel="nofollow" href="https://datatrading.info">Data Trading</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="1243" class="elementor elementor-1243">
						<div class="elementor-inner">
				<div class="elementor-section-wrap">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-963601e elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="963601e" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
							<div class="elementor-row">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-e5b4582" data-id="e5b4582" data-element_type="column">
			<div class="elementor-column-wrap elementor-element-populated">
							<div class="elementor-widget-wrap">
						<div class="elementor-element elementor-element-133c92c elementor-widget elementor-widget-text-editor" data-id="133c92c" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p>Dopo aver creato una <a href="http://datatrading.info/backtrader-primo-script/">strategia di base</a> ed <a href="http://datatrading.info/utilizzare-lanalyzers-di-backtrader/">averla analizzata</a>, il prossimo passo consiste nell&#8217;ottimizzare questa strategia. L&#8217;ottimizzazione è un processo di verifica che assegna valori diversi per ogni parametro della strategia al fine di individuare quale set di valori (o configurazione) fornisce i migliori risultati, in termini di profitto. Da notare che non tutti i trader algoritmici concordano sul fatto che questo processo può portare a risultati migliori. Infatti è molto facile cadere nella trappola del sovradimensionamento dei dati (meglio noto come <strong>overfitting</strong>).</p>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-bc2fd93 elementor-widget elementor-widget-heading" data-id="bc2fd93" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h2 class="elementor-heading-title elementor-size-default">Perchè Ottimizzare?</h2>		</div>
				</div>
				<div class="elementor-element elementor-element-4516787 elementor-widget elementor-widget-text-editor" data-id="4516787" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				La motivazione è che i mercati sono in continua evoluzione. Abbiamo mercati rialzisti, mercati ribassisti, periodi di inflazione, periodi di deflazione, tempi instabili e momenti di serenità. Se ciò non bastasse, strumenti diversi hanno ritmi diversi e mercati diversi hanno nature e comportamenti diversi. Ciò significa che i parametri per uno strumento in un mercato potrebbero non essere ottimali per un altro strumento in un altro mercato.					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-4588da5 elementor-widget elementor-widget-heading" data-id="4588da5" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h4 class="elementor-heading-title elementor-size-default">...ma attenzione all'OverFitting</h4>		</div>
				</div>
				<div class="elementor-element elementor-element-448ab18 elementor-widget elementor-widget-text-editor" data-id="448ab18" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				Quando si ottimizzano le strategie, è necessario prestare la massima attenzione a non creare parametri che funzionino solo per in un determinato &#8220;momento nel tempo&#8221;. Può essere allettante ottenere i migliori risultati dall&#8217;ottimizzazione e quindi prevedere l&#8217;esecuzione live della strategia con tali parametri. Tuttavia, se il set di dati è limitato ad un breve periodo di tempo o copre solamente una determinata condizione di mercato, è possibile che i parametri siano ottimizzati solo quel specifico momento nel passato, quindi del tutto inutilizzabili nel futuro.
Nella statistica o nel machine learning, infatti, un modello statistico o un algoritmo viene applicato ai dati di addestramento (training) in modo che possa essere utilizzato per fare previsioni nel futuro. L&#8217;overfitting si verifica quando il modello o l&#8217;algoritmo è troppo complesso per il set di dati preso in considerazione. In questo contesto, complesso significa che l&#8217;algoritmo è ottimizzato a tal punto da adattarsi (fit) solo a quei dati. L&#8217;overfitting provoca reazioni eccessive se applicato all&#8217;esterno dei dati di training. Nel nostro ambiente di backtesting si possono considerare i nostri dati storici di backtest come i dati di training e la nostra strategia come l&#8217;algoritmo.					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-c8fc79b elementor-widget elementor-widget-heading" data-id="c8fc79b" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h2 class="elementor-heading-title elementor-size-default">Requisiti</h2>		</div>
				</div>
				<div class="elementor-element elementor-element-28db7df elementor-widget elementor-widget-text-editor" data-id="28db7df" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p>Il codice in questo articolo fa seguito al codice sviluppato nel precedente articolo <a href="http://datatrading.info/backtrader-primo-script/">Backtrader: Primo Script</a> e fa parte della serie introduttiva a BackTrader. Se è la prima volta che senti parlare di Backtrader e / o Python, ti suggerisco di iniziare dall&#8217;articolo <a href="http://datatrading.info/setup-di-base-per-python-e-backtrader/">Setup di base per Python e BackTrader</a></p>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-c0714d4 elementor-widget elementor-widget-heading" data-id="c0714d4" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h2 class="elementor-heading-title elementor-size-default">Il Codice</h2>		</div>
				</div>
				<div class="elementor-element elementor-element-62da09f elementor-widget elementor-widget-text-editor" data-id="62da09f" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				Il codice di questo tutorial è costruito su tre esempi. Ogni esempio sarà accompagnato da specifici commenti e output.					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-51de5ee elementor-widget elementor-widget-heading" data-id="51de5ee" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h4 class="elementor-heading-title elementor-size-default">Parte 1° - Aggiungere i Parametri</h4>		</div>
				</div>
				<div class="elementor-element elementor-element-c1975d5 elementor-widget elementor-widget-text-editor" data-id="c1975d5" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				Prima di poter ottimizzare il codice dobbiamo fornire alla strategia qualcosa da ottimizzare, cioè alcuni parametri modificabili. Se si osserva il codice del <a href="http://datatrading.info/backtrader-primo-script/">precedente articolo</a>, si può notare come abbiamo impostato a 21 il parametro relativo al periodo del RSI. Questa è una codifica rigida cioè il parametro è valorizzato all&#8217;interno del codice e non può essere successivamente modificato. Per effettuare l&#8217;ottimizzazione è necessario rendere questo parametro configurabile quando si carica la strategia all&#8217;interno del motore <code style="color: #e83e8c;">cerebro</code>.					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-f422c1c elementor-widget elementor-widget-bdt-source-code" data-id="f422c1c" data-element_type="widget" data-widget_type="bdt-source-code.default">
				<div class="elementor-widget-container">
			
        <div class="bdt-source-code prism-okaidia">

                            <button class="bdt-copy-button">Copy                </button>
            
            <pre class="language-py">
            <code>import backtrader as bt
from datetime import datetime

class rsiStrategy(bt.Strategy):
    params = (
        (&#039;period&#039;,21),
        )

    def __init__(self):
        self.rsi = bt.indicators.RSI_SMA(self.data.close, period=self.params.period)

    def next(self):
        if not self.position:
            if self.rsi &lt; 30: self.buy(size=100) else: if self.rsi &gt; 70:
                self.sell(size=100)


#Variable for our starting cash
startcash = 10000

#Create an instance of cerebro
cerebro = bt.Cerebro()

#Add our strategy
cerebro.addstrategy(rsiStrategy, period=14)

#Get Apple data from Yahoo Finance.
data = bt.feeds.YahooFinanceData(
    dataname=&#039;AAPL&#039;,
    fromdate = datetime(2016,1,1),
    todate = datetime(2017,1,1),
    buffered= True
    )

#Add the data to Cerebro
cerebro.adddata(data)

# Set our desired cash start
cerebro.broker.setcash(startcash)

# Run over everything
cerebro.run()

#Get final portfolio Value
portvalue = cerebro.broker.getvalue()
pnl = portvalue - startcash

#Print out the final result
print(&#039;Final Portfolio Value: ${}&#039;.format(portvalue))
print(&#039;P/L: ${}&#039;.format(pnl))

#Finally plot the end results
cerebro.plot(style=&#039;candlestick&#039;)</code>
        </pre>

        </div>
		</div>
				</div>
				<div class="elementor-element elementor-element-c59e3b1 elementor-widget elementor-widget-heading" data-id="c59e3b1" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h4 class="elementor-heading-title elementor-size-default">Spiegazione del codice</h4>		</div>
				</div>
				<div class="elementor-element elementor-element-2927d9b elementor-widget elementor-widget-text-editor" data-id="2927d9b" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				Prima di tutto, facciamo riferimento al codice nel nostro primo script. Questo permette facilmente di notare alcune modifiche. Di seguito sono riportati uno snippet del codice per dichiarare la classe e il metodo <code style="color: #e83e8c;">__init__()</code> del primo script					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-cb58cb4 elementor-widget elementor-widget-bdt-source-code" data-id="cb58cb4" data-element_type="widget" data-widget_type="bdt-source-code.default">
				<div class="elementor-widget-container">
			
        <div class="bdt-source-code prism-okaidia">

                            <button class="bdt-copy-button">Copy                </button>
            
            <pre class="language-py">
            <code>class rsiStrategy(bt.Strategy):

    def __init__(self):
        self.rsi = bt.indicators.RSI_SMA(self.data.close, period=21)</code>
        </pre>

        </div>
		</div>
				</div>
				<div class="elementor-element elementor-element-dfafc7b elementor-widget elementor-widget-text-editor" data-id="dfafc7b" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				Mentre in questo esempio, il codice è diventato:					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-0282c94 elementor-widget elementor-widget-bdt-source-code" data-id="0282c94" data-element_type="widget" data-widget_type="bdt-source-code.default">
				<div class="elementor-widget-container">
			
        <div class="bdt-source-code prism-okaidia">

                            <button class="bdt-copy-button">Copy                </button>
            
            <pre class="language-py">
            <code>class rsiStrategy(bt.Strategy):
    params = (
        (&#039;period&#039;,21),
        )

    def __init__(self):
        self.rsi = bt.indicators.RSI_SMA(self.data.close, period=self.params.period)</code>
        </pre>

        </div>
		</div>
				</div>
				<div class="elementor-element elementor-element-f8a7e9d elementor-widget elementor-widget-text-editor" data-id="f8a7e9d" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p>In questo caso è stata aggiunta la tupla &#8220;<code style="color: #e83e8c;">params</code>&#8220;, essa contiene altre tuple che sono utilizzate per dichiarare i parametri della strategia. Che cos&#8217;è una tupla? Una tupla è un elenco di elementi fissi che non possono essere cambiati o modificati. Nei linguaggi di programmazione è abitudine differenziare ciò che è <strong>immutabile</strong> (non modificabile), come le costanti, e ciò che è <strong>mutabile</strong> (che può essere modificato), come le variabili. All&#8217;interno della tupla dei parametri, si ha un parametro (<code style="color: #e83e8c;">"period", 21</code>). Il primo elemento è una stringa che identifica il nome / riferimento per il parametro. Il secondo elemento è il valore predefinito per quel determinato parametro.</p><p>Avere un valore predefinito significa che non è necessario specificare un parametro ogni volta che si esegue la strategia. Se non viene specificato nulla, la strategia verrà eseguita con il valore di default. Puoi inserire tutti i parametri che desideri nella tupla dei parametri. Assicurati solo di aggiungerli come tupla all&#8217;interno della tupla principale (nota come tupla <strong>nidificata</strong>). I parametri della strategia sono accessibili ovunque nella classe. sono infatti gestiti come qualsiasi altro attributo di classe (variabile). Nel metodo <strong>__init__()</strong> si accede a <code style="color: #e83e8c;">self.params.period</code> e viene assegnato alla keyword <code style="color: #e83e8c;">period</code> quando si aggiunge l&#8217;indicatore RSI.</p>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-53a6fd6 elementor-widget elementor-widget-heading" data-id="53a6fd6" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h4 class="elementor-heading-title elementor-size-default"><strong>Chiamata alla Strategia</strong><br></h4>		</div>
				</div>
				<div class="elementor-element elementor-element-1ad3892 elementor-widget elementor-widget-bdt-source-code" data-id="1ad3892" data-element_type="widget" data-widget_type="bdt-source-code.default">
				<div class="elementor-widget-container">
			
        <div class="bdt-source-code prism-okaidia">

                            <button class="bdt-copy-button">Copy                </button>
            
            <pre class="language-py">
            <code>cerebro.addstrategy(firstStrategy, period=14)</code>
        </pre>

        </div>
		</div>
				</div>
				<div class="elementor-element elementor-element-ab210bc elementor-widget elementor-widget-text-editor" data-id="ab210bc" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				Il codice relativo all&#8217;aggiunta della strategia all&#8217;interno di cerebro è stato modificato in modo da poter specificare la keyword per il parametro. Come accennato in precedenza, questo è facoltativo. Richiamare la strategia in questo modo ci permetterà di ottimizzarla in un secondo momento.					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-4dcf0a7 elementor-widget elementor-widget-heading" data-id="4dcf0a7" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h4 class="elementor-heading-title elementor-size-default">NOTE:</h4>		</div>
				</div>
				<div class="elementor-element elementor-element-d8b6e69 elementor-widget elementor-widget-text-editor" data-id="d8b6e69" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p>Ci sono un paio di cose a cui prestare attenzione quando si aggiungono parametri. Il primo è che ogni tupla nell&#8217;elenco delle tuple necessita di una virgola alla fine . Se sei abituato a scrivere codice in Python, saprai che per gli oggetti <em>list</em> e <em>dict</em>, l&#8217;ultimo valore non dovrebbe avere la virgola finale.</p><p>Se si digita: (errato)</p>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-06176c5 elementor-widget elementor-widget-bdt-source-code" data-id="06176c5" data-element_type="widget" data-widget_type="bdt-source-code.default">
				<div class="elementor-widget-container">
			
        <div class="bdt-source-code prism-okaidia">

                            <button class="bdt-copy-button">Copy                </button>
            
            <pre class="language-py">
            <code>params = (
        (&#039;period&#039;,21)
    )</code>
        </pre>

        </div>
		</div>
				</div>
				<div class="elementor-element elementor-element-24f1705 elementor-widget elementor-widget-text-editor" data-id="24f1705" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				Invece di (corretto):					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-5634dd8 elementor-widget elementor-widget-bdt-source-code" data-id="5634dd8" data-element_type="widget" data-widget_type="bdt-source-code.default">
				<div class="elementor-widget-container">
			
        <div class="bdt-source-code prism-okaidia">

                            <button class="bdt-copy-button">Copy                </button>
            
            <pre class="language-py">
            <code>params = (
        (&#039;period&#039;,21),
    )</code>
        </pre>

        </div>
		</div>
				</div>
				<div class="elementor-element elementor-element-bf38544 elementor-widget elementor-widget-text-editor" data-id="bf38544" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p>Si ottiene un ValueError:</p><p><em>ValueError: too many values to unpack (expected 2)</em></p><p>Inoltre, fai attenzione quando aggiungi i tuoi indicatori nel metodo <strong>__init__()</strong>. Se dimentichi di usare una keyword, puoi ottenere un TypeError.<br />Se si digita: (errato)</p>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-9a6a87a elementor-widget elementor-widget-bdt-source-code" data-id="9a6a87a" data-element_type="widget" data-widget_type="bdt-source-code.default">
				<div class="elementor-widget-container">
			
        <div class="bdt-source-code prism-okaidia">

                            <button class="bdt-copy-button">Copy                </button>
            
            <pre class="language-py">
            <code>def __init__(self):
        self.rsi = bt.indicators.RSI_SMA(self.data.close, self.params.period)</code>
        </pre>

        </div>
		</div>
				</div>
				<div class="elementor-element elementor-element-12205dc elementor-widget elementor-widget-text-editor" data-id="12205dc" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				Invece di: (corretto)					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-71d6ed7 elementor-widget elementor-widget-bdt-source-code" data-id="71d6ed7" data-element_type="widget" data-widget_type="bdt-source-code.default">
				<div class="elementor-widget-container">
			
        <div class="bdt-source-code prism-okaidia">

                            <button class="bdt-copy-button">Copy                </button>
            
            <pre class="language-py">
            <code>def __init__(self):
        self.rsi = bt.indicators.RSI_SMA(self.data.close, period=self.params.period)</code>
        </pre>

        </div>
		</div>
				</div>
				<div class="elementor-element elementor-element-085b01b elementor-widget elementor-widget-text-editor" data-id="085b01b" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p>Si ottiene il seguente errore:</p><p><em>TypeError: __init__() takes 1 positional argument but 2 were given</em></p><p> <br />Questo errore può creare molta confusione. Infatti abbiamo aggiunto l&#8217;indicatore nel metodo __init__() della strategia, ma in realtà l&#8217;errore si riferisce al metodo __init __ () dell&#8217;indicatore (classe <em>indicators</em>)! Si potrebbe perdere molto tempo ad eseguire il debug della cosa sbagliata.</p>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-b5f753e elementor-widget elementor-widget-heading" data-id="b5f753e" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h3 class="elementor-heading-title elementor-size-default">Parte 2° - Ottimizzazione</h3>		</div>
				</div>
				<div class="elementor-element elementor-element-c8d6aef elementor-widget elementor-widget-text-editor" data-id="c8d6aef" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p>Ora che siamo in grado di inizializzare la strategia con parametri differenti, ottimizzare il codice è piuttosto semplice. Tecnicamente dobbiamo solamente sostituire la linea <code style="color: #e83e8c;">cerebro.addstrategy()</code> con:</p>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-c6d7bb9 elementor-widget elementor-widget-bdt-source-code" data-id="c6d7bb9" data-element_type="widget" data-widget_type="bdt-source-code.default">
				<div class="elementor-widget-container">
			
        <div class="bdt-source-code prism-okaidia">

                            <button class="bdt-copy-button">Copy                </button>
            
            <pre class="language-py">
            <code>#Add our strategy
cerebro.optstrategy(firstStrategy, period=range(14,21))</code>
        </pre>

        </div>
		</div>
				</div>
				<div class="elementor-element elementor-element-b669f47 elementor-widget elementor-widget-text-editor" data-id="b669f47" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				Quindi <em>cerebro</em> eseguirà la strategia per ogni periodo nell&#8217;intervallo indicato. Tuttavia, l&#8217;output non sarebbe utile. Se vogliamo essere in grado di vedere quale parametro ha le migliori prestazioni si dovrà aggiungere un nuovo metodo alla nostra strategia. Il codice completo è il seguente:					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-d7ebeb7 elementor-widget elementor-widget-bdt-source-code" data-id="d7ebeb7" data-element_type="widget" data-widget_type="bdt-source-code.default">
				<div class="elementor-widget-container">
			
        <div class="bdt-source-code prism-okaidia">

                            <button class="bdt-copy-button">Copy                </button>
            
            <pre class="language-py">
            <code>import backtrader as bt
from datetime import datetime

class rsiStrategy(bt.Strategy):
    params = (
        (&#039;period&#039;,21),
        )

    def __init__(self):
        self.startcash = self.broker.getvalue()
        self.rsi = bt.indicators.RSI_SMA(self.data.close, period=self.params.period)

    def next(self):
        if not self.position:
            if self.rsi &lt; 30: self.buy(size=100) else: if self.rsi &gt; 70:
                self.sell(size=100)

    def stop(self):
        pnl = round(self.broker.getvalue() - self.startcash,2)
        print(&#039;RSI Period: {} Final PnL: {}&#039;.format(
            self.params.period, pnl))

if __name__ == &#039;__main__&#039;:
    #Variable for our starting cash
    startcash = 10000

    #Create an instance of cerebro
    cerebro = bt.Cerebro()

    #Add our strategy
    cerebro.optstrategy(rsiStrategy, period=range(14,21))

    #Get Apple data from Yahoo Finance.
    data = bt.feeds.YahooFinanceData(
        dataname=&#039;AAPL&#039;,
        fromdate = datetime(2016,1,1),
        todate = datetime(2017,1,1),
        buffered= True
        )

    #Add the data to Cerebro
    cerebro.adddata(data)

    # Set our desired cash start
    cerebro.broker.setcash(startcash)

    # Run over everything
    strats = cerebro.run()</code>
        </pre>

        </div>
		</div>
				</div>
				<div class="elementor-element elementor-element-0d144e7 elementor-widget elementor-widget-heading" data-id="0d144e7" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h4 class="elementor-heading-title elementor-size-default"><br>Spiegazione del codice</h4>		</div>
				</div>
				<div class="elementor-element elementor-element-98af6fc elementor-widget elementor-widget-text-editor" data-id="98af6fc" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p>I lettori attenti avranno sicuramente notato che ci state alcune cancellazioni, oltre al nuovo metodo (funzione) aggiunto alla strategia. Innanzitutto diamo un&#8217;occhiata al nuovo metodo:</p>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-5ec2cf8 elementor-widget elementor-widget-bdt-source-code" data-id="5ec2cf8" data-element_type="widget" data-widget_type="bdt-source-code.default">
				<div class="elementor-widget-container">
			
        <div class="bdt-source-code prism-okaidia">

                            <button class="bdt-copy-button">Copy                </button>
            
            <pre class="language-py">
            <code>    def stop(self):
        pnl = round(self.broker.getvalue() - self.startcash,2)
        print(&#039;RSI Period: {} Final PnL: {}&#039;.format(
            self.params.period, pnl))</code>
        </pre>

        </div>
		</div>
				</div>
				<div class="elementor-element elementor-element-b0129ff elementor-widget elementor-widget-text-editor" data-id="b0129ff" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p>Backtrader eseguirà diversi cicli di backtesting, uno per ogni diverso valore dei parametri, prima di arrivare al termine dello script. Nell&#8217;esempio precedente, si ha come output il valore del portafoglio e il PnL (profitti e perdite) alla fine dello script. Questo significa che non si ha visibilità dei risultati dei singoli vedrai i risultati dei singoli backtest se lasciamo l&#8217;istruzione <code style="color: #e83e8c;">print()</code> dopo la fine dell&#8217;esecuzione di cerebro. Di conseguenza, un metodo <code style="color: #e83e8c;">stop()</code> viene aggiunto allo script. Questo metodo fa parte della classe base <code style="color: #e83e8c;">bt.Strategy</code> e si sta semplicemente sovrascrivendo la logica al suo interno, dato che si eredita la bt.Strategy durante la creazione della classe della nostra strategia. Come suggerisce il nome, si richiama questo metodo quando la strategia si interrompe. Questo è l&#8217;ideale per restituire i profitti o le perdite finali al termine del test.</p><p><strong>Plotting</strong></p><p>Oltre a rimuovere l&#8217;istruzioni <em>print()</em> alla fine dello script, è stata rimossa anche la funzione di stampa dei grafici. Quando si effettua l&#8217;ottimizzazione, ti consiglio di non graficare l&#8217;output perchè, al momento della stesura di questo articolo, il framework prevede la creazione di un grafico alla fine di ogni ciclo della strategia. E&#8217; quindi necessario chiudere manualmente il grafico prima dell&#8217;inizio del ciclio successivo. Se si ha molti parametri, questo può richiedere molto tempo e diventare fastidioso.</p>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-4ac373a elementor-widget elementor-widget-heading" data-id="4ac373a" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h4 class="elementor-heading-title elementor-size-default">Risultati della 2° Parte</h4>		</div>
				</div>
				<div class="elementor-element elementor-element-237596d elementor-widget elementor-widget-image" data-id="237596d" data-element_type="widget" data-widget_type="image.default">
				<div class="elementor-widget-container">
								<div class="elementor-image">
												<img width="863" height="510" src="https://datatrading.info/wp-content/uploads/2019/08/backtrader-optimize-strategies-trading-algoritmico.png" class="attachment-large size-large" alt="" loading="lazy" srcset="https://datatrading.info/wp-content/uploads/2019/08/backtrader-optimize-strategies-trading-algoritmico.png 863w, https://datatrading.info/wp-content/uploads/2019/08/backtrader-optimize-strategies-trading-algoritmico-768x454.png 768w" sizes="(max-width: 863px) 100vw, 863px" />														</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-48ef4ba elementor-widget elementor-widget-text-editor" data-id="48ef4ba" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				Quindi sembra che un periodo pari a 17 sia il valore ottimale per questo set di dati. È interessante notare come se il valore fosse diverso di sole 2 unità (un periodo di 19), i risultati sarebbero drasticamente diversi!					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-0e6268f elementor-widget elementor-widget-heading" data-id="0e6268f" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h3 class="elementor-heading-title elementor-size-default">Parte 3 - Fare un ulteriore passo avanti</h3>		</div>
				</div>
				<div class="elementor-element elementor-element-aa6e531 elementor-widget elementor-widget-text-editor" data-id="aa6e531" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				L&#8217;esempio precedente è funzionalmente corretto ma secondo me c&#8217;è un problema. I risultati sopra riportati non sono ordinati e si potrebbe aver esigenza di qualcosa di più della sola stampa dei risultati. Immagina di avere 3 parametri che possono produrre oltre a 100 combinazioni. Sarebbe piuttosto laborioso e soggetto a errori se si dovesse leggere le righe una per una. In questa parte, vedremo come accedere ai risultati dopo che cerebro avrà terminato la sua elaborazione.					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-bef47f2 elementor-widget elementor-widget-bdt-source-code" data-id="bef47f2" data-element_type="widget" data-widget_type="bdt-source-code.default">
				<div class="elementor-widget-container">
			
        <div class="bdt-source-code prism-okaidia">

                            <button class="bdt-copy-button">Copy                </button>
            
            <pre class="language-py">
            <code>import backtrader as bt
from datetime import datetime

class rsiStrategy(bt.Strategy):
    params = (
        (&#039;period&#039;,21),
        )

    def __init__(self):
        self.startcash = self.broker.getvalue()
        self.rsi = bt.indicators.RSI_SMA(self.data.close, period=self.params.period)

    def next(self):
        if not self.position:
            if self.rsi &lt; 30: 
                self.buy(size=100) 
            elif self.rsi &gt; 70:
                self.sell(size=100)

if __name__ == &#039;__main__&#039;:
    #Variable for our starting cash
    startcash = 10000

    #Create an instance of cerebro
    cerebro = bt.Cerebro(optreturn=False)

    #Add our strategy
    cerebro.optstrategy(rsiStrategy, period=range(14,21))

    #Get Apple data from Yahoo Finance.
    data = bt.feeds.YahooFinanceData(
        dataname=&#039;AAPL&#039;,
        fromdate = datetime(2016,1,1),
        todate = datetime(2017,1,1),
        buffered= True
        )

    #Add the data to Cerebro
    cerebro.adddata(data)

    # Set our desired cash start
    cerebro.broker.setcash(startcash)

    # Run over everything
    opt_runs = cerebro.run()

    # Generate results list
    final_results_list = []
    for run in opt_runs:
        for strategy in run:
            value = round(strategy.broker.get_value(),2)
            PnL = round(value - startcash,2)
            period = strategy.params.period
            final_results_list.append([period,PnL])

    #Sort Results List
    by_period = sorted(final_results_list, key=lambda x: x[0])
    by_PnL = sorted(final_results_list, key=lambda x: x[1], reverse=True)

    #Print results
    print(&#039;Results: Ordered by period:&#039;)
    for result in by_period:
        print(&#039;Period: {}, PnL: {}&#039;.format(result[0], result[1]))
    print(&#039;Results: Ordered by Profit:&#039;)
    for result in by_PnL:
        print(&#039;Period: {}, PnL: {}&#039;.format(result[0], result[1]))</code>
        </pre>

        </div>
		</div>
				</div>
				<div class="elementor-element elementor-element-4e90b81 elementor-widget elementor-widget-heading" data-id="4e90b81" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h4 class="elementor-heading-title elementor-size-default">Spiegazione del codice</h4>		</div>
				</div>
				<div class="elementor-element elementor-element-e48da40 elementor-widget elementor-widget-text-editor" data-id="e48da40" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				In questo esempio, ci sono alcune modifiche al codice. Innanzitutto abbiamo rimosso il metodo <code style="color: #e83e8c;">stop()</code> nell&#8217;ultimo esempio. Avremo accesso a tutti i valori di cui abbiamo bisogno solo dopo che lo script avrà terminato l&#8217;esecuzione. Un altro cambiamento che potrebbe essere poco visibile se si sta semplicemente copiando e incollando il codice è:					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-d86155f elementor-widget elementor-widget-bdt-source-code" data-id="d86155f" data-element_type="widget" data-widget_type="bdt-source-code.default">
				<div class="elementor-widget-container">
			
        <div class="bdt-source-code prism-okaidia">

                            <button class="bdt-copy-button">Copy                </button>
            
            <pre class="language-py">
            <code>cerebro = bt.Cerebro(optreturn=False)</code>
        </pre>

        </div>
		</div>
				</div>
				<div class="elementor-element elementor-element-7c07c55 elementor-widget elementor-widget-text-editor" data-id="7c07c55" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p>In questo caso abbiamo aggiunto un nuovo parametro all&#8217;inizializzazione di cerebro. Questo parametro modifica ciò che viene restituito da <code style="color: #e83e8c;">cerebro.run()</code> alla fine dello script. In un normale script cerebro.run() restituisce oggetti completi della classe strategia. Questi oggetti sono creati a partite dal modello della classe <code style="color: #e83e8c;">rsiStrategy</code> che abbiamo scritto nel codice. Gli oggetti <em>Strategia</em> permettono di accedere a tutti disponibili per cerebro durante il test (indicatori, dati, analizzatori, osservatori, ecc.) anche dopo il termine dell&#8217;esecuzione di cerebro. In questo modo si ha accesso a tutti i dati e i risultati. Tuttavia, durante l&#8217;ottimizzazione, cerebro.run() restituisce gli oggetti <code style="color: #e83e8c;">OptReturn</code> come impostazione di default predefinita. Questi sono oggetti limitati dato che contengono solo i parametri e gli analizzatori, al fine di migliorare la velocità di ottimizzazione.</p><p>Si presume che le metriche importanti necessarie per decidere quali parametri siano i migliori possano essere dedotte solo dagli analizzatori e dai parametri. Tuttavia, poiché gli esempi riportati in questo articolo hanno restituito il profitto finale, è opportuno mantenere questa convenzione anche nell&#8217;esempio finale. Per questo motivo, il parametro <strong>optreturn</strong> deve essere impostato su false poiché le informazioni del broker (per i profitti / perdite) non fanno parte di un analizzatore. Abbiamo bisogno di Cerebro per ricavare oggetti Strategia completi. Il resto del codice di interesse per questo esempio si verifica al termine dell&#8217;esecuzione di cerebro.</p>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-690a3f5 elementor-widget elementor-widget-heading" data-id="690a3f5" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h4 class="elementor-heading-title elementor-size-default">Ricavare i dati da un oggetto Strategia<br></h4>		</div>
				</div>
				<div class="elementor-element elementor-element-4ba46ca elementor-widget elementor-widget-bdt-source-code" data-id="4ba46ca" data-element_type="widget" data-widget_type="bdt-source-code.default">
				<div class="elementor-widget-container">
			
        <div class="bdt-source-code prism-okaidia">

                            <button class="bdt-copy-button">Copy                </button>
            
            <pre class="language-py">
            <code># Run over everything
opt_runs = cerebro.run()

# Generate results list
final_results_list = []
for run in opt_runs:
    for strategy in run:
        value = round(strategy.broker.get_value(),2)
        PnL = round(value - startcash,2)
        period = strategy.params.period
        final_results_list.append([period,PnL])</code>
        </pre>

        </div>
		</div>
				</div>
				<div class="elementor-element elementor-element-c5f3982 elementor-widget elementor-widget-text-editor" data-id="c5f3982" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				Cerebro restituisce un elenco di oggetti Strategia per ciascun ciclo tramite la lista dei parametri. In questo esempio, esiste solo una strategia. Tuttavia, poiché viene restituito una lista nidificata (lista di liste), è necessario iterare l&#8217;oggetto restituito per due volte per ottenere le informazioni necessarie. Dopo aver ricavato i valori desiderati, questi possono essere aggiunti alla lista <code style="color: #e83e8c;">final_results_list</code>. Questa lista può essere quindi ordinata come si desidera.					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-a243442 elementor-widget elementor-widget-bdt-source-code" data-id="a243442" data-element_type="widget" data-widget_type="bdt-source-code.default">
				<div class="elementor-widget-container">
			
        <div class="bdt-source-code prism-okaidia">

                            <button class="bdt-copy-button">Copy                </button>
            
            <pre class="language-py">
            <code>#Sort Results List
by_period = sorted(final_results_list, key=lambda x: x[0])
by_PnL = sorted(final_results_list, key=lambda x: x[1], reverse=True)</code>
        </pre>

        </div>
		</div>
				</div>
				<div class="elementor-element elementor-element-f01a3d4 elementor-widget elementor-widget-text-editor" data-id="f01a3d4" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				Se non conosci Python, questa parte potrebbe sembrare un po&#8217; complessa. Anche <code style="color: #e83e8c;">final_results_list</code> è una lista nidificata. Per ordinarla correttamente, dobbiamo fornire una chiave di ordinamento. È quindi necessario passare una funzione all&#8217;argomento della keyword <code style="color: #e83e8c;">key</code>. Un <code style="color: #e83e8c;">lambda</code> è una piccola funzione formata da una riga che ci consente di utilizzare la chiave di ordinamento. Per ulteriori informazioni, ho aggiunto alcuni link di riferimento per letture di approffondimento alla fine di questo articolo.					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-a0d7e13 elementor-widget elementor-widget-heading" data-id="a0d7e13" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h4 class="elementor-heading-title elementor-size-default">Risultati della 3° parte</h4>		</div>
				</div>
				<div class="elementor-element elementor-element-44b544c elementor-widget elementor-widget-image" data-id="44b544c" data-element_type="widget" data-widget_type="image.default">
				<div class="elementor-widget-container">
								<div class="elementor-image">
												<img width="832" height="486" src="https://datatrading.info/wp-content/uploads/2019/08/optimize-strategies-backtrader-trading-algoritmico-part3.png" class="attachment-large size-large" alt="" loading="lazy" srcset="https://datatrading.info/wp-content/uploads/2019/08/optimize-strategies-backtrader-trading-algoritmico-part3.png 832w, https://datatrading.info/wp-content/uploads/2019/08/optimize-strategies-backtrader-trading-algoritmico-part3-768x449.png 768w" sizes="(max-width: 832px) 100vw, 832px" />														</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-2f4c981 elementor-widget elementor-widget-text-editor" data-id="2f4c981" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				Eccoci. Questo articolo è diventato molto più lungo di quanto mi aspettassi quando ho iniziato a scriverlo. Se sei riuscito a farcela fino a qui senza saltare, spero che il contenuto abbia fornito qualche consiglio e spunto operativo.					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-86bf3cf elementor-widget elementor-widget-heading" data-id="86bf3cf" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h2 class="elementor-heading-title elementor-size-default">Letture di Approfondimento</h2>		</div>
				</div>
				<div class="elementor-element elementor-element-fe71963 elementor-widget elementor-widget-text-editor" data-id="fe71963" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<ol><li>Documentazione di Backtrader su l&#8217;ottimizzazione: <a href="https://www.backtrader.com/docu/quickstart/quickstart.html?highlight=optimize#let-s-optimize">https://www.backtrader.com/docu/quickstart/quickstart.html?highlight=optimize#let-s-optimize</a></li><li>Documentazione di Backtrader su Cerebro: <a href="https://www.backtrader.com/docu/cerebro.html">https://www.backtrader.com/docu/cerebro.html</a></li><li>Tutorial sul sorting di Python: <a href="https://docs.python.org/3/howto/sorting.html">https://docs.python.org/3/howto/sorting.html</a></li><li>Documentazione di Python su lambda: <a href="https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions">https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions</a></li></ol>					</div>
						</div>
				</div>
						</div>
					</div>
		</div>
								</div>
					</div>
		</section>
									</div>
			</div>
					</div>
		<p>L'articolo <a rel="nofollow" href="https://datatrading.info/ottimizzare-le-strategie-con-backtrader/">Ottimizzare le Strategie con BackTrader</a> proviene da <a rel="nofollow" href="https://datatrading.info">Data Trading</a>.</p>
]]></content:encoded>
					
		
		
			</item>
		<item>
		<title>Utilizzare gli Analyzers di Backtrader</title>
		<link>https://datatrading.info/utilizzare-lanalyzers-di-backtrader/</link>
		
		<dc:creator><![CDATA[Gianluca]]></dc:creator>
		<pubDate>Wed, 16 Jan 2019 12:41:25 +0000</pubDate>
				<category><![CDATA[ToolBox BackTrader]]></category>
		<category><![CDATA[Toolbox Backtrader]]></category>
		<guid isPermaLink="false">https://datatrading.info/?p=1230</guid>

					<description><![CDATA[<p>Una volta compreso come scrivere una strategia di base, il passo successivo consiste nel quantificare la qualità di questa strategia. Backtrader ha una ricca libreria di strumenti di analisi in grado di fornire molte metriche, dal semplice rapporto vincite / perdite ai più complessi Sharpe Ratio e analisi del drawdown. Cosa sono gli Analyzer di &#8230;</p>
<p class="read-more"> <a class="" href="https://datatrading.info/utilizzare-lanalyzers-di-backtrader/"> <span class="screen-reader-text">Utilizzare gli Analyzers di Backtrader</span> Leggi tutto »</a></p>
<p>L'articolo <a rel="nofollow" href="https://datatrading.info/utilizzare-lanalyzers-di-backtrader/">Utilizzare gli Analyzers di Backtrader</a> proviene da <a rel="nofollow" href="https://datatrading.info">Data Trading</a>.</p>
]]></description>
										<content:encoded><![CDATA[		<div data-elementor-type="wp-post" data-elementor-id="1230" class="elementor elementor-1230">
						<div class="elementor-inner">
				<div class="elementor-section-wrap">
									<section class="elementor-section elementor-top-section elementor-element elementor-element-4edf82a elementor-section-boxed elementor-section-height-default elementor-section-height-default" data-id="4edf82a" data-element_type="section">
						<div class="elementor-container elementor-column-gap-default">
							<div class="elementor-row">
					<div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-fe3319c" data-id="fe3319c" data-element_type="column">
			<div class="elementor-column-wrap elementor-element-populated">
							<div class="elementor-widget-wrap">
						<div class="elementor-element elementor-element-895d107 elementor-widget elementor-widget-text-editor" data-id="895d107" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p>Una volta compreso come scrivere una strategia di base, il passo successivo consiste nel quantificare la qualità di questa strategia. Backtrader ha una ricca libreria di strumenti di analisi in grado di fornire molte metriche, dal semplice rapporto vincite / perdite ai più complessi Sharpe Ratio e analisi del drawdown.</p>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-2ead8fc elementor-widget elementor-widget-heading" data-id="2ead8fc" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h2 class="elementor-heading-title elementor-size-default">Cosa sono gli Analyzer di Backtrader</h2>		</div>
				</div>
				<div class="elementor-element elementor-element-6854771 elementor-widget elementor-widget-text-editor" data-id="6854771" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p>In poche parole, sono oggetti che possono essere caricati <em>cerebro</em> (il motore di Backtrader) e sono in grado di monitorare la tua strategia mentre questa viene eseguita. Quando cerebro ha terminato l&#8217;esecuzione del backtesting, è possibile accedere agli analizzatori tramite oggetti di strategia che sono restituiti da cerebro a termine dell&#8217;esecuzione. Gli stessi oggetti dell&#8217;analizzatore hanno un metodo (funzione) speciale che restituisce un dizionario di tutte le statistiche che l&#8217;analizzatore sta monitorando. A volte si tratta di molte informazioni e altre volte solo una o due statistiche. Non ti preoccupare se in questo momento ti sembra complesso, diventerà tutto più chiaro quando vedrai il codice. Esiste un&#8217;intera libreria dei diversi analizzatori che possono essere utilizzati in Backtrader (e se ne possono creare di nuovi in ogni momento). Dopo aver lavorato con questo script, dai un&#8217;occhiata alla <a href="https://www.backtrader.com/docu/analyzers/analyzers.html">documentazione</a> per vedere quali analizzatori ti interessano e modifica il codice per includerli nel tuo backtesting.</p>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-3281e8c elementor-widget elementor-widget-heading" data-id="3281e8c" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h2 class="elementor-heading-title elementor-size-default">Obiettivo</h2>		</div>
				</div>
				<div class="elementor-element elementor-element-7cbee4f elementor-widget elementor-widget-text-editor" data-id="7cbee4f" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p>Questo articolo ha lo scopo di mostrare come inizializzare, analizzare e restituire i risultati di un backtesting. E&#8217; il continuo del precedente articolo &#8220;<a href="http://datatrading.info/backtrader-primo-script/">Backtrader: Primo Script</a>&#8221; e fa parte della serie introduttiva di Backtrader. Per vedere le regole della strategia e la spiegazione del codice, dai un&#8217;occhiata al precedente articolo.</p>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-84c1d1f elementor-widget elementor-widget-heading" data-id="84c1d1f" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h2 class="elementor-heading-title elementor-size-default">Background</h2>		</div>
				</div>
				<div class="elementor-element elementor-element-f48d0a7 elementor-widget elementor-widget-text-editor" data-id="f48d0a7" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p>Esistono un paio di metriche di backtest / trading che rientrano in questo post. Ecco un glossario:</p>
<ul>
<li><strong>Strike Rate</strong>: questa è una percentuale che rappresenta il numero di volte di trade vincenti rispetto al numero totale di scambi che sono stati effettuati (tasso di vittoria / trade totali). Può aiutare a identificare se esiste un vantaggio nel mercato. Alcuni trader mirano a ottenere il strike rate più alto possibile, che corrisponde a tante piccole vincite. Altri sono felici con strike rate più bassi, ma puntano a grandi vincite e piccole perdite.</li>
<li><strong>SQN</strong>: <strong>S</strong>ystem <strong>Q</strong>uality <strong>N</strong>umber (numero di qualità del sistema), questo è stato definito dal dott. Van Tharp dell&#8217;istituto Van Tharp. In pratica dà un punteggio alla tua strategia. Una spiegazione più accademica del SQN, presente nel sito web di Van Tharp, è la seguente:&nbsp;</li>
</ul>
<blockquote>
<p><em>l&#8217;SQN misura la relazione tra la media (stimata) e la deviazione standard della distribuzione &#8220;R-multipla&#8221; generata da un sistema di trading. Apporta inoltre un adeguamento rispetto al numero di operazioni coinvolte.</em></p>
</blockquote>
<p>Nota: la documentazione di Backtrader fornisce un utile sistema di classificazione per SQN:</p>
<ul>
<li>1.6 &#8211; 1.9 Sotto la media</li>
<li>2,0 &#8211; 2,4 Media</li>
<li>2,5 &#8211; 2,9 Buono</li>
<li>3,0 &#8211; 5,0 Eccellente</li>
<li>5,1 &#8211; 6,9 Superbo</li>
<li>7.0 &#8211; Santo Graal?</li>
</ul>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-8e43b94 elementor-widget elementor-widget-heading" data-id="8e43b94" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h2 class="elementor-heading-title elementor-size-default">Il Codice<br></h2>		</div>
				</div>
				<div class="elementor-element elementor-element-c7344eb elementor-widget elementor-widget-bdt-source-code" data-id="c7344eb" data-element_type="widget" data-widget_type="bdt-source-code.default">
				<div class="elementor-widget-container">
			
        <div class="bdt-source-code prism-okaidia">

                            <button class="bdt-copy-button">Copy                </button>
            
            <pre class="language-py">
            <code>import backtrader as bt
from datetime import datetime
from collections import OrderedDict

class RsiStrategy(bt.Strategy):

    def __init__(self):
        self.rsi = bt.indicators.RSI_SMA(self.data.close, period=21)

    def next(self):
        if not self.position:
            if self.rsi &lt; 30: self.buy(size=100) else: if self.rsi &gt; 70:
                self.sell(size=100)


def tradeAnalysis(analyzer):
    &#039;&#039;&#039;
    Function to print the Technical Analysis results in a nice format.
    &#039;&#039;&#039;
    #Get the results we are interested in
    total_open = analyzer.total.open
    total_closed = analyzer.total.closed
    total_won = analyzer.won.total
    total_lost = analyzer.lost.total
    win_streak = analyzer.streak.won.longest
    lose_streak = analyzer.streak.lost.longest
    pnl_net = round(analyzer.pnl.net.total,2)
    strike_rate = (total_won / total_closed) * 100
    #Designate the rows
    h1 = [&#039;Total Open&#039;, &#039;Total Closed&#039;, &#039;Total Won&#039;, &#039;Total Lost&#039;]
    h2 = [&#039;Strike Rate&#039;,&#039;Win Streak&#039;, &#039;Losing Streak&#039;, &#039;PnL Net&#039;]
    r1 = [total_open, total_closed,total_won,total_lost]
    r2 = [strike_rate, win_streak, lose_streak, pnl_net]
    #Check which set of headers is the longest.
    if len(h1) &gt; len(h2):
        header_length = len(h1)
    else:
        header_length = len(h2)
    #Print the rows
    print_list = [h1,r1,h2,r2]
    row_format =&quot;{:&lt;15}&quot; * (header_length + 1)
    print(&quot;Trade Analysis Results:&quot;)
    for row in print_list:
        print(row_format.format(&#039;&#039;,*row))

def SQN(analyzer):
    sqn = round(analyzer.sqn,2)
    print(&#039;SQN: {}&#039;.format(sqn))

#Variable for our starting cash
startcash = 100000

#Create an instance of cerebro
cerebro = bt.Cerebro()

#Add our strategy
cerebro.addstrategy(RsiStrategy)

#Get Apple data from Yahoo Finance.
data = bt.feeds.YahooFinanceData(
    dataname=&#039;AAPL&#039;,
    fromdate = datetime(2009,1,1),
    todate = datetime(2017,1,1),
    buffered= True
    )

#Add the data to Cerebro
cerebro.adddata(data)

# Set our desired cash start
cerebro.broker.setcash(startcash)

# Add the analyzers we are interested in
cerebro.addanalyzer(bt.analyzers.TradeAnalyzer, _name=&quot;ta&quot;)
cerebro.addanalyzer(bt.analyzers.SQN, _name=&quot;sqn&quot;)

# Run over everything
strategies = cerebro.run()
rsiStrat = strategies[0]

# print the analyzers
tradeAnalysis(rsiStrat.analyzers.ta.get_analysis())
SQN(rsiStrat.analyzers.sqn.get_analysis())

#Get final portfolio Value
portvalue = cerebro.broker.getvalue()

#Print out the final result
print(&#039;Final Portfolio Value: ${}&#039;.format(portvalue))

#Finally plot the end results
cerebro.plot(style=&#039;candlestick&#039;)</code>
        </pre>

        </div>
		</div>
				</div>
				<div class="elementor-element elementor-element-eaba9de elementor-widget elementor-widget-heading" data-id="eaba9de" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h4 class="elementor-heading-title elementor-size-default"><br>Spiegazione del Codice</h4>		</div>
				</div>
				<div class="elementor-element elementor-element-b10e12f elementor-widget elementor-widget-text-editor" data-id="b10e12f" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				Vediamo innanzitutto come aggiungere un Analyzer alla strategia consiste semplicemente nel richiamare la funzione <code style="color: #e83e8c;">addanaylzer()</code>. In particolare, si sta aggiungendo il TradeAnalyzer e assegnandogli un nome. Il nome rende molto più semplice accedere  questo oggetto in qualsiasi momento					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-da45df9 elementor-widget elementor-widget-bdt-source-code" data-id="da45df9" data-element_type="widget" data-widget_type="bdt-source-code.default">
				<div class="elementor-widget-container">
			
        <div class="bdt-source-code prism-okaidia">

                            <button class="bdt-copy-button">Copy                </button>
            
            <pre class="language-py">
            <code>cerebro.addanalyzer(bt.analyzers.TradeAnalyzer, _name=&quot;ta&quot;)</code>
        </pre>

        </div>
		</div>
				</div>
				<div class="elementor-element elementor-element-984803d elementor-widget elementor-widget-text-editor" data-id="984803d" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p>Al termine dell&#8217;esecuzione di cerebro, viene restituito un elenco di oggetti strategia. In questo esempio abbiamo caricato in cerebro una sola strategia. Anche in questo caso, l&#8217;unica strategia viene comunque restituita all&#8217;interno di un array. Pertanto è necessario estrarre la nostra strategia  utilizzando un indice della posizione all&#8217;interno dell&#8217;array ([0]). Una volta che abbiamo quello, abbiamo la nostra strategia.</p>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-f5bc96f elementor-widget elementor-widget-bdt-source-code" data-id="f5bc96f" data-element_type="widget" data-widget_type="bdt-source-code.default">
				<div class="elementor-widget-container">
			
        <div class="bdt-source-code prism-okaidia">

                            <button class="bdt-copy-button">Copy                </button>
            
            <pre class="language-py">
            <code># Run over everything
strategies = cerebro.run()
firstStrat = strategies[0]</code>
        </pre>

        </div>
		</div>
				</div>
				<div class="elementor-element elementor-element-b551c2a elementor-widget elementor-widget-text-editor" data-id="b551c2a" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				A questo punto dobbiamo accedere ai nostri dati &#8230;. È possibile accedere agli Analyzers dall&#8217;interno dell&#8217;oggetto strategia ed utilizzare un metodo (funzione) nativo per restituire un dizionario (<code style="color: #e83e8c;">dict</code>) contenente tutti i risultati. Di seguito si evidenzia come lo script accede all&#8217;analyzer &#8220;ta&#8221; (che è il nome che gli abbiamo dato durante il caricamento dell&#8217;analyzer in cerebro) dall&#8217;oggetto strategia <code style="color: #e83e8c;">rsiStrat</code> e si richiama il metodo <code style="color: #e83e8c;">get_analysis()</code>.					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-795e943 elementor-widget elementor-widget-bdt-source-code" data-id="795e943" data-element_type="widget" data-widget_type="bdt-source-code.default">
				<div class="elementor-widget-container">
			
        <div class="bdt-source-code prism-okaidia">

                            <button class="bdt-copy-button">Copy                </button>
            
            <pre class="language-py">
            <code>bt.analyzers.TradeAnalyzer, _name=&quot;ta&quot;</code>
        </pre>

        </div>
		</div>
				</div>
				<div class="elementor-element elementor-element-4077c89 elementor-widget elementor-widget-text-editor" data-id="4077c89" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p>Dopo aver ottenuto il dizionario dei dati, è necessario estrarre i dati che ci interessano ed elaborarli a seconda dei nostri scopi. In questo caso, si considerano solo alcune metriche e vengono stampate sul terminale. Tuttavia, è possibile espandere questa soluzione ed esportare i risultati in un CSV. In questo esempio si esaminano:</p><ul><li>Totale operazioni ancora aperte</li><li>Totale operazioni chiuse</li><li>Totale operazioni vincenti</li><li>Totale operazioni perdenti</li><li>Strike rate (che si calcola sulla base dei dati forniti)</li><li>Migliore serie vincente</li><li>Peggior serie perdente</li><li>Profitti o perdite.</li><li>SQN della strategia</li></ul><p>Per fare ciò ho creato due funzioni di stampa speciali. E&#8217; quindi possibile riutilizzare questo codice (copia e incolla) per gli script futuri.</p><p>La funzione di stampa che merita di essere commentata più avanti è:</p>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-3d90035 elementor-widget elementor-widget-bdt-source-code" data-id="3d90035" data-element_type="widget" data-widget_type="bdt-source-code.default">
				<div class="elementor-widget-container">
			
        <div class="bdt-source-code prism-okaidia">

                            <button class="bdt-copy-button">Copy                </button>
            
            <pre class="language-py">
            <code>tradeAnalysis(analyzer):</code>
        </pre>

        </div>
		</div>
				</div>
				<div class="elementor-element elementor-element-97bc854 elementor-widget elementor-widget-text-editor" data-id="97bc854" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				Temo che questa funzione possa essere eccessivamente complessa per questo articolo introduttivo e destinato ai principianti a causa della linea mostrata di seguito. 
Mi piace solo l&#8217;output pulito che produce nel terminale. Contiene alcune tecniche avanzate di Python per la formattazione del testo. Sto parlando della linea che assomiglia a questa:					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-2ce5be6 elementor-widget elementor-widget-bdt-source-code" data-id="2ce5be6" data-element_type="widget" data-widget_type="bdt-source-code.default">
				<div class="elementor-widget-container">
			
        <div class="bdt-source-code prism-okaidia">

                            <button class="bdt-copy-button">Copy                </button>
            
            <pre class="language-py">
            <code>row_format =&quot;{:&lt;15}&quot; * (header_length + 1)</code>
        </pre>

        </div>
		</div>
				</div>
				<div class="elementor-element elementor-element-879f876 elementor-widget elementor-widget-text-editor" data-id="879f876" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p>Questa riga mi consente di stampare l&#8217;output distribuito uniformemente senza dover installare un altro modulo di Python, come TextTable. Per ulteriori informazioni sulla formattazione dei dati in Python, consultare i documenti qui: <a href="https://docs.python.org/3/library/string.html#formatspec">https://docs.python.org/3/library/string.html</a></p><p>Un&#8217;alternativa (e un&#8217;opzione molto più semplice) consiste nell&#8217;utilizzare il metodo print() integrato nativamente nella classe dell&#8217;analyzer. Questo metodo stampa ogni valore all&#8217;interno dell&#8217;analizzatore su una riga separata. Se vuoi farlo o no è solo questione di gusti personali. Ad esempio, se si desidera disporre di una formattazione alternativa, selezionare determinate statistiche di interesse o elaborare ulteriormente i dati. Di seguito è riportato un esempio di come gestire questa alternativa:</p>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-3758470 elementor-widget elementor-widget-bdt-source-code" data-id="3758470" data-element_type="widget" data-widget_type="bdt-source-code.default">
				<div class="elementor-widget-container">
			
        <div class="bdt-source-code prism-okaidia">

                            <button class="bdt-copy-button">Copy                </button>
            
            <pre class="language-py">
            <code># Run over everything
strategies = cerebro.run()
firstStrat = strategies[0]

for x in firstStrat.analyzers:
    x.print()</code>
        </pre>

        </div>
		</div>
				</div>
				<div class="elementor-element elementor-element-550e353 elementor-widget elementor-widget-heading" data-id="550e353" data-element_type="widget" data-widget_type="heading.default">
				<div class="elementor-widget-container">
			<h2 class="elementor-heading-title elementor-size-default">I Risultati</h2>		</div>
				</div>
				<div class="elementor-element elementor-element-5e25ea0 elementor-widget elementor-widget-text-editor" data-id="5e25ea0" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p>Eseguendo lo script si dovrebbe otterene qualcosa del genere al seguente output:</p>					</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-08517ce elementor-widget elementor-widget-image" data-id="08517ce" data-element_type="widget" data-widget_type="image.default">
				<div class="elementor-widget-container">
								<div class="elementor-image">
												<img width="1023" height="468" src="https://datatrading.info/wp-content/uploads/2018/01/output-analyzer-backtrader-trading-algoritmico.jpg" class="attachment-large size-large" alt="" loading="lazy" srcset="https://datatrading.info/wp-content/uploads/2018/01/output-analyzer-backtrader-trading-algoritmico.jpg 1023w, https://datatrading.info/wp-content/uploads/2018/01/output-analyzer-backtrader-trading-algoritmico-768x351.jpg 768w" sizes="(max-width: 1023px) 100vw, 1023px" />														</div>
						</div>
				</div>
				<div class="elementor-element elementor-element-5f1c34a elementor-widget elementor-widget-text-editor" data-id="5f1c34a" data-element_type="widget" data-widget_type="text-editor.default">
				<div class="elementor-widget-container">
								<div class="elementor-text-editor elementor-clearfix">
				<p>Non è un ottimo risultato di trading! Sembra che la nostra strategia super semplice abbia bisogno di qualche raffinamento.</p><p>Chi l&#8217;avrebbe mai detto?!?</p>					</div>
						</div>
				</div>
						</div>
					</div>
		</div>
								</div>
					</div>
		</section>
									</div>
			</div>
					</div>
		<p>L'articolo <a rel="nofollow" href="https://datatrading.info/utilizzare-lanalyzers-di-backtrader/">Utilizzare gli Analyzers di Backtrader</a> proviene da <a rel="nofollow" href="https://datatrading.info">Data Trading</a>.</p>
]]></content:encoded>
					
		
		
			</item>
	</channel>
</rss>
